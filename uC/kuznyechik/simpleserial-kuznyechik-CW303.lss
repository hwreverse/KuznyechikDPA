
simpleserial-kuznyechik-CW303.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000cd0  00802000  00001610  000016a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000518  00802cd0  00802cd0  00002374  2**0
                  ALLOC
  3 .stab         000000c0  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000005c  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000160  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004d9a  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ecf  00000000  00000000  000073fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000fe9  00000000  00000000  0000a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000690  00000000  00000000  0000b2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000218d  00000000  00000000  0000b944  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bf4  00000000  00000000  0000dad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  0000f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__ctors_end>
       4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
       8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
       c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      10:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      14:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      18:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      1c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      20:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      24:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      28:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      2c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      30:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      34:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      38:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      3c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      40:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      44:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      48:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      4c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      50:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      54:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      58:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      5c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      60:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      64:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      68:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      6c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      70:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      74:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      78:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      7c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      80:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      84:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      88:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      8c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      90:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      94:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      98:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      9c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      ac:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      bc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      cc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      dc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      ec:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      fc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     100:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     104:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     108:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     10c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     110:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     114:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     118:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     11c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     120:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     124:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     128:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     12c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     130:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     134:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     138:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     13c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     140:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     144:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     148:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     14c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     150:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     154:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     158:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     15c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     160:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     164:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     168:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     16c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     170:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     174:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     178:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     17c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     180:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     184:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     188:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     18c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     190:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     194:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     198:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     19c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1ac:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1bc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>

000001c8 <__trampolines_start>:
     1c8:	0c 94 98 01 	jmp	0x330	; 0x330 <reset>
     1cc:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <fubar>
     1d0:	0c 94 bb 01 	jmp	0x376	; 0x376 <get_dc>
     1d4:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <check_version>
     1d8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <get_pt>
     1dc:	0c 94 9a 01 	jmp	0x334	; 0x334 <get_key>

000001e0 <__trampolines_end>:
     1e0:	01 02       	muls	r16, r17
     1e2:	04 08       	sbc	r0, r4
     1e4:	10 20       	and	r1, r0
     1e6:	40 80       	ld	r4, Z
     1e8:	1b 36       	cpi	r17, 0x6B	; 107

000001ea <aes_sbox>:
     1ea:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     1fa:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     20a:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     21a:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     22a:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     23a:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     24a:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     25a:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     26a:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     27a:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     28a:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     29a:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     2aa:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     2ba:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     2ca:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     2da:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	df e3       	ldi	r29, 0x3F	; 63
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0c bf       	out	0x3c, r16	; 60

000002fa <__do_copy_data>:
     2fa:	1c e2       	ldi	r17, 0x2C	; 44
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
     2fe:	b0 e2       	ldi	r27, 0x20	; 32
     300:	e0 e1       	ldi	r30, 0x10	; 16
     302:	f6 e1       	ldi	r31, 0x16	; 22
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	0b bf       	out	0x3b, r16	; 59
     308:	02 c0       	rjmp	.+4      	; 0x30e <__do_copy_data+0x14>
     30a:	07 90       	elpm	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	a0 3d       	cpi	r26, 0xD0	; 208
     310:	b1 07       	cpc	r27, r17
     312:	d9 f7       	brne	.-10     	; 0x30a <__do_copy_data+0x10>

00000314 <__do_clear_bss>:
     314:	21 e3       	ldi	r18, 0x31	; 49
     316:	a0 ed       	ldi	r26, 0xD0	; 208
     318:	bc e2       	ldi	r27, 0x2C	; 44
     31a:	01 c0       	rjmp	.+2      	; 0x31e <.do_clear_bss_start>

0000031c <.do_clear_bss_loop>:
     31c:	1d 92       	st	X+, r1

0000031e <.do_clear_bss_start>:
     31e:	a8 3e       	cpi	r26, 0xE8	; 232
     320:	b2 07       	cpc	r27, r18
     322:	e1 f7       	brne	.-8      	; 0x31c <.do_clear_bss_loop>
     324:	0e 94 a8 0a 	call	0x1550	; 0x1550 <main>
     328:	0c 94 06 0b 	jmp	0x160c	; 0x160c <_exit>

0000032c <__bad_interrupt>:
     32c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000330 <reset>:

uint8_t reset(uint8_t* x)
{
    // Reset key here if needed
	return 0x00;
}
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <get_key>:
#include <stdint.h>
#include <stdlib.h>

uint8_t get_key(uint8_t* k)
{
	kuznyechik_setkey(k);
     334:	0e 94 05 02 	call	0x40a	; 0x40a <kuznyechik_setkey>
	return 0x00;
}
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	08 95       	ret

0000033c <get_pt>:

uint8_t get_pt(uint8_t* pt)
{
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	ec 01       	movw	r28, r24
	trigger_high();
     348:	00 e0       	ldi	r16, 0x00	; 0
     34a:	16 e0       	ldi	r17, 0x06	; 6
     34c:	ff 24       	eor	r15, r15
     34e:	f3 94       	inc	r15
     350:	f8 01       	movw	r30, r16
     352:	f5 82       	std	Z+5, r15	; 0x05
	kuznyechik_crypto(pt); /* encrypting the data block */
     354:	0e 94 13 04 	call	0x826	; 0x826 <kuznyechik_crypto>
	trigger_low();
     358:	f8 01       	movw	r30, r16
     35a:	f6 82       	std	Z+6, r15	; 0x06
	simpleserial_put('r', 16, pt);
     35c:	ae 01       	movw	r20, r28
     35e:	60 e1       	ldi	r22, 0x10	; 16
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	82 e7       	ldi	r24, 0x72	; 114
     364:	0e 94 db 06 	call	0xdb6	; 0xdb6 <simpleserial_put>
	return 0x00;
}
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	08 95       	ret

00000376 <get_dc>:

uint8_t get_dc(uint8_t* pt)
{
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	ec 01       	movw	r28, r24
    trigger_high();
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	16 e0       	ldi	r17, 0x06	; 6
     386:	ff 24       	eor	r15, r15
     388:	f3 94       	inc	r15
     38a:	f8 01       	movw	r30, r16
     38c:	f5 82       	std	Z+5, r15	; 0x05
    kuznyechik_decrypto(pt);
     38e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <kuznyechik_decrypto>
    trigger_low();
     392:	f8 01       	movw	r30, r16
     394:	f6 82       	std	Z+6, r15	; 0x06
    simpleserial_put('r', 16, pt);
     396:	ae 01       	movw	r20, r28
     398:	60 e1       	ldi	r22, 0x10	; 16
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	82 e7       	ldi	r24, 0x72	; 114
     39e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <simpleserial_put>
    return 0x00;
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	08 95       	ret

000003b0 <fubar>:
	return 0x00;
}

uint8_t fubar(uint8_t* x)
{
    putch('f');
     3b0:	86 e6       	ldi	r24, 0x66	; 102
     3b2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('u');
     3b6:	85 e7       	ldi	r24, 0x75	; 117
     3b8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('b');
     3bc:	82 e6       	ldi	r24, 0x62	; 98
     3be:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('a');
     3c2:	81 e6       	ldi	r24, 0x61	; 97
     3c4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('r');
     3c8:	82 e7       	ldi	r24, 0x72	; 114
     3ca:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('\n');
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
	return 0x00;
}
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	08 95       	ret

000003d8 <AddRoundKey>:
/*****************************************************************************/

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
     3d8:	e0 91 02 31 	lds	r30, 0x3102	; 0x803102 <state>
     3dc:	f0 91 03 31 	lds	r31, 0x3103	; 0x803103 <state+0x1>
     3e0:	90 e1       	ldi	r25, 0x10	; 16
     3e2:	89 9f       	mul	r24, r25
     3e4:	b0 01       	movw	r22, r0
     3e6:	11 24       	eor	r1, r1
  uint8_t i;
  for(i=0;i<16;++i)
  {
    (*state)[i] ^= trueRoundKey[round][i];
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	d9 01       	movw	r26, r18
     3ee:	a6 0f       	add	r26, r22
     3f0:	b7 1f       	adc	r27, r23
     3f2:	a0 50       	subi	r26, 0x00	; 0
     3f4:	be 4d       	sbci	r27, 0xDE	; 222
     3f6:	40 81       	ld	r20, Z
     3f8:	9c 91       	ld	r25, X
     3fa:	94 27       	eor	r25, r20
     3fc:	91 93       	st	Z+, r25
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
     400:	3f 4f       	sbci	r19, 0xFF	; 255
// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
  uint8_t i;
  for(i=0;i<16;++i)
     402:	20 31       	cpi	r18, 0x10	; 16
     404:	31 05       	cpc	r19, r1
     406:	91 f7       	brne	.-28     	; 0x3ec <AddRoundKey+0x14>
  {
    (*state)[i] ^= trueRoundKey[round][i];
  }
}
     408:	08 95       	ret

0000040a <kuznyechik_setkey>:
/*****************************************************************************/
/* Public functions:                                                         */
/*****************************************************************************/

void kuznyechik_setkey(uint8_t* key)
{
     40a:	2f 92       	push	r2
     40c:	3f 92       	push	r3
     40e:	4f 92       	push	r4
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	c1 54       	subi	r28, 0x41	; 65
     434:	d1 09       	sbc	r29, r1
     436:	cd bf       	out	0x3d, r28	; 61
     438:	de bf       	out	0x3e, r29	; 62
  Key = key;
     43a:	80 93 d0 2c 	sts	0x2CD0, r24	; 0x802cd0 <__data_end>
     43e:	90 93 d1 2c 	sts	0x2CD1, r25	; 0x802cd1 <__data_end+0x1>
     442:	ac 01       	movw	r20, r24
     444:	22 ed       	ldi	r18, 0xD2	; 210
     446:	3c e2       	ldi	r19, 0x2C	; 44
     448:	22 96       	adiw	r28, 0x02	; 2
     44a:	2e af       	std	Y+62, r18	; 0x3e
     44c:	3f af       	std	Y+63, r19	; 0x3f
     44e:	22 97       	sbiw	r28, 0x02	; 2
     450:	22 ee       	ldi	r18, 0xE2	; 226
     452:	3c e2       	ldi	r19, 0x2C	; 44
     454:	e2 ed       	ldi	r30, 0xD2	; 210
     456:	fc e2       	ldi	r31, 0x2C	; 44
  state_t tempState2;

  // The first two round keys are the first and second half of the key.
  for(i=0;i<16;i++)
  {
    RoundKey[0][i] = Key[i];
     458:	da 01       	movw	r26, r20
     45a:	6d 91       	ld	r22, X+
     45c:	ad 01       	movw	r20, r26
     45e:	61 93       	st	Z+, r22
  uint8_t i,j;
  uint8_t div = 0x2;
  state_t tempState2;

  // The first two round keys are the first and second half of the key.
  for(i=0;i<16;i++)
     460:	bc e2       	ldi	r27, 0x2C	; 44
     462:	e2 3e       	cpi	r30, 0xE2	; 226
     464:	fb 07       	cpc	r31, r27
     466:	c1 f7       	brne	.-16     	; 0x458 <kuznyechik_setkey+0x4e>
     468:	fc 01       	movw	r30, r24
     46a:	70 96       	adiw	r30, 0x10	; 16
     46c:	80 96       	adiw	r24, 0x20	; 32
    RoundKey[0][i] = Key[i];
  }
  
  for(i=0;i<16;i++)
  {
    RoundKey[1][i] = Key[i+16];  
     46e:	41 91       	ld	r20, Z+
     470:	d9 01       	movw	r26, r18
     472:	4d 93       	st	X+, r20
     474:	9d 01       	movw	r18, r26
  for(i=0;i<16;i++)
  {
    RoundKey[0][i] = Key[i];
  }
  
  for(i=0;i<16;i++)
     476:	8e 17       	cp	r24, r30
     478:	9f 07       	cpc	r25, r31
     47a:	c9 f7       	brne	.-14     	; 0x46e <kuznyechik_setkey+0x64>
     47c:	32 ed       	ldi	r19, 0xD2	; 210
     47e:	23 2e       	mov	r2, r19
     480:	3c e2       	ldi	r19, 0x2C	; 44
     482:	33 2e       	mov	r3, r19
     484:	42 e0       	ldi	r20, 0x02	; 2
     486:	54 2e       	mov	r5, r20
     488:	22 ef       	ldi	r18, 0xF2	; 242
     48a:	30 e3       	ldi	r19, 0x30	; 48
     48c:	2c a3       	std	Y+36, r18	; 0x24
     48e:	3d a3       	std	Y+37, r19	; 0x25
     490:	5e 01       	movw	r10, r28
     492:	31 e1       	ldi	r19, 0x11	; 17
     494:	a3 0e       	add	r10, r19
     496:	b1 1c       	adc	r11, r1
/* Public functions:                                                         */
/*****************************************************************************/

void kuznyechik_setkey(uint8_t* key)
{
  Key = key;
     498:	95 01       	movw	r18, r10
     49a:	82 ef       	ldi	r24, 0xF2	; 242
     49c:	90 e3       	ldi	r25, 0x30	; 48
     49e:	f1 01       	movw	r30, r2

  for(i=2;i<65;i=i+2)
  {
    for(j=0; j<16; j++)
    {
      stateDuringKS[j] = RoundKey[i-2][j];
     4a0:	41 91       	ld	r20, Z+
     4a2:	dc 01       	movw	r26, r24
     4a4:	4d 93       	st	X+, r20
     4a6:	cd 01       	movw	r24, r26
      tempState2[j] = RoundKey[i-1][j];
     4a8:	57 85       	ldd	r21, Z+15	; 0x0f
     4aa:	d9 01       	movw	r26, r18
     4ac:	5d 93       	st	X+, r21
     4ae:	9d 01       	movw	r18, r26
      RoundKey[i+1][j] = stateDuringKS[j];
     4b0:	47 a7       	std	Z+47, r20	; 0x2f
    RoundKey[1][i] = Key[i+16];  
  }

  for(i=2;i<65;i=i+2)
  {
    for(j=0; j<16; j++)
     4b2:	b1 e3       	ldi	r27, 0x31	; 49
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	9b 07       	cpc	r25, r27
     4b8:	99 f7       	brne	.-26     	; 0x4a0 <kuznyechik_setkey+0x96>
    {
      stateDuringKS[j] = RoundKey[i-2][j];
      tempState2[j] = RoundKey[i-1][j];
      RoundKey[i+1][j] = stateDuringKS[j];
    }
    uint8_t k = (uint8_t)((i/div)-1);
     4ba:	85 2d       	mov	r24, r5
     4bc:	86 95       	lsr	r24
     4be:	81 50       	subi	r24, 0x01	; 1
     4c0:	e0 e1       	ldi	r30, 0x10	; 16
     4c2:	8e 9f       	mul	r24, r30
     4c4:	c0 01       	movw	r24, r0
     4c6:	11 24       	eor	r1, r1
     4c8:	e2 ef       	ldi	r30, 0xF2	; 242
     4ca:	f0 e3       	ldi	r31, 0x30	; 48
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
static void AddRoundKey_KS(uint8_t round)
{
    uint8_t i;
    for(i=0;i<16;++i)
  {
    stateDuringKS[i] ^= C[round][i];
     4d0:	b9 01       	movw	r22, r18
     4d2:	68 0f       	add	r22, r24
     4d4:	79 1f       	adc	r23, r25
     4d6:	60 54       	subi	r22, 0x40	; 64
     4d8:	7d 4d       	sbci	r23, 0xDD	; 221
     4da:	50 81       	ld	r21, Z
     4dc:	db 01       	movw	r26, r22
     4de:	4c 91       	ld	r20, X
     4e0:	45 27       	eor	r20, r21
     4e2:	41 93       	st	Z+, r20
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
    {0x5e, 0xa7, 0xd8, 0x58, 0x1e, 0x14, 0x9b, 0x61, 0xf1, 0x6a, 0xc1, 0x45, 0x9c, 0xed, 0xa8, 0x20}};

static void AddRoundKey_KS(uint8_t round)
{
    uint8_t i;
    for(i=0;i<16;++i)
     4e8:	20 31       	cpi	r18, 0x10	; 16
     4ea:	31 05       	cpc	r19, r1
     4ec:	89 f7       	brne	.-30     	; 0x4d0 <kuznyechik_setkey+0xc6>
     4ee:	82 ef       	ldi	r24, 0xF2	; 242
     4f0:	90 e3       	ldi	r25, 0x30	; 48
/* Private functions related to Sbox:                                        */
/*****************************************************************************/

static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 81       	ld	r18, Z
     4f6:	a2 2f       	mov	r26, r18
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	a0 50       	subi	r26, 0x00	; 0
     4fc:	bf 4d       	sbci	r27, 0xDF	; 223
static void Sstep_KS(void)
{
    uint8_t i;
    for(i = 0; i < 16; ++i)
  {
    stateDuringKS[i] = getSBoxValue(stateDuringKS[i]);
     4fe:	2c 91       	ld	r18, X
     500:	dc 01       	movw	r26, r24
     502:	2d 93       	st	X+, r18
     504:	cd 01       	movw	r24, r26


static void Sstep_KS(void)
{
    uint8_t i;
    for(i = 0; i < 16; ++i)
     506:	b1 e3       	ldi	r27, 0x31	; 49
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	9b 07       	cpc	r25, r27
     50c:	91 f7       	brne	.-28     	; 0x4f2 <kuznyechik_setkey+0xe8>
     50e:	e0 e1       	ldi	r30, 0x10	; 16
     510:	e9 a3       	std	Y+33, r30	; 0x21
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
    {0x5e, 0xa7, 0xd8, 0x58, 0x1e, 0x14, 0x9b, 0x61, 0xf1, 0x6a, 0xc1, 0x45, 0x9c, 0xed, 0xa8, 0x20}};

static void AddRoundKey_KS(uint8_t round)
{
    uint8_t i;
    for(i=0;i<16;++i)
     516:	e2 ef       	ldi	r30, 0xF2	; 242
     518:	f0 e3       	ldi	r31, 0x30	; 48
{
    uint8_t i;
    state_t stateCopy;
    for(i=0;i<16;i++)
    {
      stateCopy[i] = stateDuringKS[i];
     51a:	21 91       	ld	r18, Z+
     51c:	dc 01       	movw	r26, r24
     51e:	2d 93       	st	X+, r18
     520:	cd 01       	movw	r24, r26

static void Rstep_KS(void)
{
    uint8_t i;
    state_t stateCopy;
    for(i=0;i<16;i++)
     522:	b1 e3       	ldi	r27, 0x31	; 49
     524:	e2 30       	cpi	r30, 0x02	; 2
     526:	fb 07       	cpc	r31, r27
     528:	c1 f7       	brne	.-16     	; 0x51a <kuznyechik_setkey+0x110>
    }
    for(i=0;i<16;i++)
    {
        if(i==0)
        {
            stateDuringKS[i] = mult_mod_poly[4][stateCopy[0]] ^ mult_mod_poly[2][stateCopy[1]] ^ mult_mod_poly[3][stateCopy[2]] ^ mult_mod_poly[1][stateCopy[3]] ^ mult_mod_poly[6][stateCopy[4]] ^ mult_mod_poly[5][stateCopy[5]] ^ mult_mod_poly[0][stateCopy[6]] ^ mult_mod_poly[7][stateCopy[7]] ^ mult_mod_poly[0][stateCopy[8]] ^ mult_mod_poly[5][stateCopy[9]] ^ mult_mod_poly[6][stateCopy[10]] ^ mult_mod_poly[1][stateCopy[11]] ^ mult_mod_poly[3][stateCopy[12]] ^ mult_mod_poly[2][stateCopy[13]] ^ mult_mod_poly[4][stateCopy[14]] ^ mult_mod_poly[0][stateCopy[15]];
     52a:	c9 80       	ldd	r12, Y+1	; 0x01
     52c:	ec 2d       	mov	r30, r12
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	ea 80       	ldd	r14, Y+2	; 0x02
     532:	f1 2c       	mov	r15, r1
     534:	0b 81       	ldd	r16, Y+3	; 0x03
     536:	10 e0       	ldi	r17, 0x00	; 0
     538:	ac 81       	ldd	r26, Y+4	; 0x04
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	6d 81       	ldd	r22, Y+5	; 0x05
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	4e 81       	ldd	r20, Y+6	; 0x06
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	2f 81       	ldd	r18, Y+7	; 0x07
     546:	c2 2e       	mov	r12, r18
     548:	d1 2c       	mov	r13, r1
     54a:	ce ae       	std	Y+62, r12	; 0x3e
     54c:	df ae       	std	Y+63, r13	; 0x3f
     54e:	88 84       	ldd	r8, Y+8	; 0x08
     550:	91 2c       	mov	r9, r1
     552:	89 85       	ldd	r24, Y+9	; 0x09
     554:	28 2f       	mov	r18, r24
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	2e a3       	std	Y+38, r18	; 0x26
     55a:	3f a3       	std	Y+39, r19	; 0x27
     55c:	8a 85       	ldd	r24, Y+10	; 0x0a
     55e:	c8 2e       	mov	r12, r24
     560:	d1 2c       	mov	r13, r1
     562:	c8 a6       	std	Y+40, r12	; 0x28
     564:	d9 a6       	std	Y+41, r13	; 0x29
     566:	8b 85       	ldd	r24, Y+11	; 0x0b
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	2a a7       	std	Y+42, r18	; 0x2a
     56e:	3b a7       	std	Y+43, r19	; 0x2b
     570:	6c 84       	ldd	r6, Y+12	; 0x0c
     572:	86 2d       	mov	r24, r6
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	8c a7       	std	Y+44, r24	; 0x2c
     578:	9d a7       	std	Y+45, r25	; 0x2d
     57a:	8d 85       	ldd	r24, Y+13	; 0x0d
     57c:	c8 2e       	mov	r12, r24
     57e:	d1 2c       	mov	r13, r1
     580:	ce a6       	std	Y+46, r12	; 0x2e
     582:	df a6       	std	Y+47, r13	; 0x2f
     584:	8e 85       	ldd	r24, Y+14	; 0x0e
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	4f 84       	ldd	r4, Y+15	; 0x0f
     58a:	24 2d       	mov	r18, r4
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	28 ab       	std	Y+48, r18	; 0x30
     590:	39 ab       	std	Y+49, r19	; 0x31
     592:	48 88       	ldd	r4, Y+16	; 0x10
     594:	c4 2c       	mov	r12, r4
     596:	d1 2c       	mov	r13, r1
     598:	ca aa       	std	Y+50, r12	; 0x32
     59a:	db aa       	std	Y+51, r13	; 0x33
     59c:	6e 01       	movw	r12, r28
     59e:	22 ef       	ldi	r18, 0xF2	; 242
     5a0:	62 2e       	mov	r6, r18
     5a2:	20 e3       	ldi	r18, 0x30	; 48
     5a4:	72 2e       	mov	r7, r18
     5a6:	41 2c       	mov	r4, r1
     5a8:	9f 01       	movw	r18, r30
     5aa:	20 54       	subi	r18, 0x40	; 64
     5ac:	37 4d       	sbci	r19, 0xD7	; 215
     5ae:	2a a3       	std	Y+34, r18	; 0x22
     5b0:	3b a3       	std	Y+35, r19	; 0x23
     5b2:	f7 01       	movw	r30, r14
     5b4:	e0 54       	subi	r30, 0x40	; 64
     5b6:	f9 4d       	sbci	r31, 0xD9	; 217
     5b8:	ec ab       	std	Y+52, r30	; 0x34
     5ba:	fd ab       	std	Y+53, r31	; 0x35
     5bc:	98 01       	movw	r18, r16
     5be:	20 54       	subi	r18, 0x40	; 64
     5c0:	38 4d       	sbci	r19, 0xD8	; 216
     5c2:	2e ab       	std	Y+54, r18	; 0x36
     5c4:	3f ab       	std	Y+55, r19	; 0x37
     5c6:	fd 01       	movw	r30, r26
     5c8:	e0 54       	subi	r30, 0x40	; 64
     5ca:	fa 4d       	sbci	r31, 0xDA	; 218
     5cc:	e8 af       	std	Y+56, r30	; 0x38
     5ce:	f9 af       	std	Y+57, r31	; 0x39
     5d0:	9b 01       	movw	r18, r22
     5d2:	20 54       	subi	r18, 0x40	; 64
     5d4:	35 4d       	sbci	r19, 0xD5	; 213
     5d6:	2a af       	std	Y+58, r18	; 0x3a
     5d8:	3b af       	std	Y+59, r19	; 0x3b
     5da:	da 01       	movw	r26, r20
     5dc:	a0 54       	subi	r26, 0x40	; 64
     5de:	b6 4d       	sbci	r27, 0xD6	; 214
     5e0:	ac af       	std	Y+60, r26	; 0x3c
     5e2:	bd af       	std	Y+61, r27	; 0x3d
     5e4:	ee ad       	ldd	r30, Y+62	; 0x3e
     5e6:	ff ad       	ldd	r31, Y+63	; 0x3f
     5e8:	e0 54       	subi	r30, 0x40	; 64
     5ea:	fb 4d       	sbci	r31, 0xDB	; 219
     5ec:	ee af       	std	Y+62, r30	; 0x3e
     5ee:	ff af       	std	Y+63, r31	; 0x3f
     5f0:	94 01       	movw	r18, r8
     5f2:	20 54       	subi	r18, 0x40	; 64
     5f4:	34 4d       	sbci	r19, 0xD4	; 212
     5f6:	49 01       	movw	r8, r18
     5f8:	08 a5       	ldd	r16, Y+40	; 0x28
     5fa:	19 a5       	ldd	r17, Y+41	; 0x29
     5fc:	00 54       	subi	r16, 0x40	; 64
     5fe:	16 4d       	sbci	r17, 0xD6	; 214
     600:	6a a5       	ldd	r22, Y+42	; 0x2a
     602:	7b a5       	ldd	r23, Y+43	; 0x2b
     604:	60 54       	subi	r22, 0x40	; 64
     606:	75 4d       	sbci	r23, 0xD5	; 213
     608:	4c a5       	ldd	r20, Y+44	; 0x2c
     60a:	5d a5       	ldd	r21, Y+45	; 0x2d
     60c:	40 54       	subi	r20, 0x40	; 64
     60e:	5a 4d       	sbci	r21, 0xDA	; 218
     610:	2e a5       	ldd	r18, Y+46	; 0x2e
     612:	3f a5       	ldd	r19, Y+47	; 0x2f
     614:	20 54       	subi	r18, 0x40	; 64
     616:	38 4d       	sbci	r19, 0xD8	; 216
     618:	80 54       	subi	r24, 0x40	; 64
     61a:	99 4d       	sbci	r25, 0xD9	; 217
    {
      stateCopy[i] = stateDuringKS[i];
    }
    for(i=0;i<16;i++)
    {
        if(i==0)
     61c:	41 10       	cpse	r4, r1
     61e:	42 c0       	rjmp	.+132    	; 0x6a4 <kuznyechik_setkey+0x29a>
        {
            stateDuringKS[i] = mult_mod_poly[4][stateCopy[0]] ^ mult_mod_poly[2][stateCopy[1]] ^ mult_mod_poly[3][stateCopy[2]] ^ mult_mod_poly[1][stateCopy[3]] ^ mult_mod_poly[6][stateCopy[4]] ^ mult_mod_poly[5][stateCopy[5]] ^ mult_mod_poly[0][stateCopy[6]] ^ mult_mod_poly[7][stateCopy[7]] ^ mult_mod_poly[0][stateCopy[8]] ^ mult_mod_poly[5][stateCopy[9]] ^ mult_mod_poly[6][stateCopy[10]] ^ mult_mod_poly[1][stateCopy[11]] ^ mult_mod_poly[3][stateCopy[12]] ^ mult_mod_poly[2][stateCopy[13]] ^ mult_mod_poly[4][stateCopy[14]] ^ mult_mod_poly[0][stateCopy[15]];
     620:	aa a1       	ldd	r26, Y+34	; 0x22
     622:	bb a1       	ldd	r27, Y+35	; 0x23
     624:	fc 91       	ld	r31, X
     626:	ac a9       	ldd	r26, Y+52	; 0x34
     628:	bd a9       	ldd	r27, Y+53	; 0x35
     62a:	ec 91       	ld	r30, X
     62c:	ef 27       	eor	r30, r31
     62e:	ae a9       	ldd	r26, Y+54	; 0x36
     630:	bf a9       	ldd	r27, Y+55	; 0x37
     632:	fc 90       	ld	r15, X
     634:	fe 26       	eor	r15, r30
     636:	a8 ad       	ldd	r26, Y+56	; 0x38
     638:	b9 ad       	ldd	r27, Y+57	; 0x39
     63a:	ec 91       	ld	r30, X
     63c:	fe 26       	eor	r15, r30
     63e:	aa ad       	ldd	r26, Y+58	; 0x3a
     640:	bb ad       	ldd	r27, Y+59	; 0x3b
     642:	ec 91       	ld	r30, X
     644:	fe 26       	eor	r15, r30
     646:	ac ad       	ldd	r26, Y+60	; 0x3c
     648:	bd ad       	ldd	r27, Y+61	; 0x3d
     64a:	ec 91       	ld	r30, X
     64c:	fe 26       	eor	r15, r30
     64e:	ae ad       	ldd	r26, Y+62	; 0x3e
     650:	bf ad       	ldd	r27, Y+63	; 0x3f
     652:	ec 91       	ld	r30, X
     654:	fe 26       	eor	r15, r30
     656:	d4 01       	movw	r26, r8
     658:	ec 91       	ld	r30, X
     65a:	fe 26       	eor	r15, r30
     65c:	ae a1       	ldd	r26, Y+38	; 0x26
     65e:	bf a1       	ldd	r27, Y+39	; 0x27
     660:	a0 54       	subi	r26, 0x40	; 64
     662:	bb 4d       	sbci	r27, 0xDB	; 219
     664:	ac 91       	ld	r26, X
     666:	fa 26       	eor	r15, r26
     668:	d8 01       	movw	r26, r16
     66a:	ec 91       	ld	r30, X
     66c:	fe 26       	eor	r15, r30
     66e:	db 01       	movw	r26, r22
     670:	ec 91       	ld	r30, X
     672:	fe 26       	eor	r15, r30
     674:	da 01       	movw	r26, r20
     676:	ec 91       	ld	r30, X
     678:	fe 26       	eor	r15, r30
     67a:	d9 01       	movw	r26, r18
     67c:	ec 91       	ld	r30, X
     67e:	fe 26       	eor	r15, r30
     680:	dc 01       	movw	r26, r24
     682:	ec 91       	ld	r30, X
     684:	fe 26       	eor	r15, r30
     686:	a8 a9       	ldd	r26, Y+48	; 0x30
     688:	b9 a9       	ldd	r27, Y+49	; 0x31
     68a:	a0 54       	subi	r26, 0x40	; 64
     68c:	b7 4d       	sbci	r27, 0xD7	; 215
     68e:	ac 91       	ld	r26, X
     690:	fa 26       	eor	r15, r26
     692:	aa a9       	ldd	r26, Y+50	; 0x32
     694:	bb a9       	ldd	r27, Y+51	; 0x33
     696:	a0 54       	subi	r26, 0x40	; 64
     698:	bb 4d       	sbci	r27, 0xDB	; 219
     69a:	ac 91       	ld	r26, X
     69c:	fa 26       	eor	r15, r26
     69e:	f0 92 f2 30 	sts	0x30F2, r15	; 0x8030f2 <stateDuringKS>
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <kuznyechik_setkey+0x2a2>
        }
        else
        {
            stateDuringKS[i] = stateCopy[i-1];
     6a4:	d6 01       	movw	r26, r12
     6a6:	ec 91       	ld	r30, X
     6a8:	d3 01       	movw	r26, r6
     6aa:	ec 93       	st	X, r30
    state_t stateCopy;
    for(i=0;i<16;i++)
    {
      stateCopy[i] = stateDuringKS[i];
    }
    for(i=0;i<16;i++)
     6ac:	43 94       	inc	r4
     6ae:	bf ef       	ldi	r27, 0xFF	; 255
     6b0:	cb 1a       	sub	r12, r27
     6b2:	db 0a       	sbc	r13, r27
     6b4:	ef ef       	ldi	r30, 0xFF	; 255
     6b6:	6e 1a       	sub	r6, r30
     6b8:	7e 0a       	sbc	r7, r30
     6ba:	f0 e1       	ldi	r31, 0x10	; 16
     6bc:	4f 12       	cpse	r4, r31
     6be:	ae cf       	rjmp	.-164    	; 0x61c <kuznyechik_setkey+0x212>
     6c0:	29 a1       	ldd	r18, Y+33	; 0x21
     6c2:	21 50       	subi	r18, 0x01	; 1
     6c4:	29 a3       	std	Y+33, r18	; 0x21


static void Lstep_KS(void)
{
    uint8_t i;
    for(i=0;i<16;i++)
     6c6:	21 11       	cpse	r18, r1
     6c8:	24 cf       	rjmp	.-440    	; 0x512 <kuznyechik_setkey+0x108>
     6ca:	e2 ef       	ldi	r30, 0xF2	; 242
     6cc:	f0 e3       	ldi	r31, 0x30	; 48
    Sstep_KS();
    Lstep_KS();

    for(j=0; j<16; j++)
    {
        stateDuringKS[j] ^= tempState2[j];
     6ce:	d5 01       	movw	r26, r10
     6d0:	8d 91       	ld	r24, X+
     6d2:	5d 01       	movw	r10, r26
     6d4:	90 81       	ld	r25, Z
     6d6:	89 27       	eor	r24, r25
     6d8:	81 93       	st	Z+, r24
    uint8_t k = (uint8_t)((i/div)-1);
    AddRoundKey_KS(k);
    Sstep_KS();
    Lstep_KS();

    for(j=0; j<16; j++)
     6da:	b1 e3       	ldi	r27, 0x31	; 49
     6dc:	e2 30       	cpi	r30, 0x02	; 2
     6de:	fb 07       	cpc	r31, r27
     6e0:	b1 f7       	brne	.-20     	; 0x6ce <kuznyechik_setkey+0x2c4>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	91 01       	movw	r18, r2
     6e8:	20 5e       	subi	r18, 0xE0	; 224
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
    {
        stateDuringKS[j] ^= tempState2[j];
    }
    for(j=0; j<16; j++)
    {
      RoundKey[i][j] = stateDuringKS[j];
     6ec:	ec a1       	ldd	r30, Y+36	; 0x24
     6ee:	fd a1       	ldd	r31, Y+37	; 0x25
     6f0:	41 91       	ld	r20, Z+
     6f2:	ec a3       	std	Y+36, r30	; 0x24
     6f4:	fd a3       	std	Y+37, r31	; 0x25
     6f6:	d9 01       	movw	r26, r18
     6f8:	a8 0f       	add	r26, r24
     6fa:	b9 1f       	adc	r27, r25
     6fc:	4c 93       	st	X, r20
     6fe:	01 96       	adiw	r24, 0x01	; 1

    for(j=0; j<16; j++)
    {
        stateDuringKS[j] ^= tempState2[j];
    }
    for(j=0; j<16; j++)
     700:	80 31       	cpi	r24, 0x10	; 16
     702:	91 05       	cpc	r25, r1
     704:	99 f7       	brne	.-26     	; 0x6ec <kuznyechik_setkey+0x2e2>
  for(i=0;i<16;i++)
  {
    RoundKey[1][i] = Key[i+16];  
  }

  for(i=2;i<65;i=i+2)
     706:	53 94       	inc	r5
     708:	53 94       	inc	r5
     70a:	19 01       	movw	r2, r18
     70c:	f2 e4       	ldi	r31, 0x42	; 66
     70e:	5f 12       	cpse	r5, r31
     710:	bb ce       	rjmp	.-650    	; 0x488 <kuznyechik_setkey+0x7e>
     712:	a0 e0       	ldi	r26, 0x00	; 0
     714:	b2 e2       	ldi	r27, 0x22	; 34
     716:	80 e1       	ldi	r24, 0x10	; 16
    }
  }
  
  for(j=0; j<16; j++)
  {
    trueRoundKey[0][j] = RoundKey[0][j];
     718:	22 96       	adiw	r28, 0x02	; 2
     71a:	ee ad       	ldd	r30, Y+62	; 0x3e
     71c:	ff ad       	ldd	r31, Y+63	; 0x3f
     71e:	22 97       	sbiw	r28, 0x02	; 2
     720:	90 81       	ld	r25, Z
     722:	9c 93       	st	X, r25
    trueRoundKey[1][j] = RoundKey[1][j];
     724:	90 89       	ldd	r25, Z+16	; 0x10
     726:	50 96       	adiw	r26, 0x10	; 16
     728:	9c 93       	st	X, r25
     72a:	50 97       	sbiw	r26, 0x10	; 16
    trueRoundKey[2][j] = RoundKey[16][j];
     72c:	9f 01       	movw	r18, r30
     72e:	33 95       	inc	r19
     730:	f9 01       	movw	r30, r18
     732:	90 81       	ld	r25, Z
     734:	90 96       	adiw	r26, 0x20	; 32
     736:	9c 93       	st	X, r25
     738:	90 97       	sbiw	r26, 0x20	; 32
    trueRoundKey[3][j] = RoundKey[17][j];
     73a:	22 96       	adiw	r28, 0x02	; 2
     73c:	2e ad       	ldd	r18, Y+62	; 0x3e
     73e:	3f ad       	ldd	r19, Y+63	; 0x3f
     740:	22 97       	sbiw	r28, 0x02	; 2
     742:	20 5f       	subi	r18, 0xF0	; 240
     744:	3e 4f       	sbci	r19, 0xFE	; 254
     746:	f9 01       	movw	r30, r18
     748:	90 81       	ld	r25, Z
     74a:	d0 96       	adiw	r26, 0x30	; 48
     74c:	9c 93       	st	X, r25
     74e:	d0 97       	sbiw	r26, 0x30	; 48
    trueRoundKey[4][j] = RoundKey[32][j];
     750:	9d 01       	movw	r18, r26
     752:	20 5c       	subi	r18, 0xC0	; 192
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	22 96       	adiw	r28, 0x02	; 2
     758:	4e ad       	ldd	r20, Y+62	; 0x3e
     75a:	5f ad       	ldd	r21, Y+63	; 0x3f
     75c:	22 97       	sbiw	r28, 0x02	; 2
     75e:	5e 5f       	subi	r21, 0xFE	; 254
     760:	fa 01       	movw	r30, r20
     762:	90 81       	ld	r25, Z
     764:	f9 01       	movw	r30, r18
     766:	90 83       	st	Z, r25
    trueRoundKey[5][j] = RoundKey[33][j];
     768:	20 5f       	subi	r18, 0xF0	; 240
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	22 96       	adiw	r28, 0x02	; 2
     76e:	4e ad       	ldd	r20, Y+62	; 0x3e
     770:	5f ad       	ldd	r21, Y+63	; 0x3f
     772:	22 97       	sbiw	r28, 0x02	; 2
     774:	40 5f       	subi	r20, 0xF0	; 240
     776:	5d 4f       	sbci	r21, 0xFD	; 253
     778:	fa 01       	movw	r30, r20
     77a:	90 81       	ld	r25, Z
     77c:	f9 01       	movw	r30, r18
     77e:	90 83       	st	Z, r25
    trueRoundKey[6][j] = RoundKey[48][j];
     780:	20 5f       	subi	r18, 0xF0	; 240
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	22 96       	adiw	r28, 0x02	; 2
     786:	4e ad       	ldd	r20, Y+62	; 0x3e
     788:	5f ad       	ldd	r21, Y+63	; 0x3f
     78a:	22 97       	sbiw	r28, 0x02	; 2
     78c:	5d 5f       	subi	r21, 0xFD	; 253
     78e:	fa 01       	movw	r30, r20
     790:	90 81       	ld	r25, Z
     792:	f9 01       	movw	r30, r18
     794:	90 83       	st	Z, r25
    trueRoundKey[7][j] = RoundKey[49][j];
     796:	20 5f       	subi	r18, 0xF0	; 240
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	22 96       	adiw	r28, 0x02	; 2
     79c:	4e ad       	ldd	r20, Y+62	; 0x3e
     79e:	5f ad       	ldd	r21, Y+63	; 0x3f
     7a0:	22 97       	sbiw	r28, 0x02	; 2
     7a2:	40 5f       	subi	r20, 0xF0	; 240
     7a4:	5c 4f       	sbci	r21, 0xFC	; 252
     7a6:	fa 01       	movw	r30, r20
     7a8:	90 81       	ld	r25, Z
     7aa:	f9 01       	movw	r30, r18
     7ac:	90 83       	st	Z, r25
    trueRoundKey[8][j] = RoundKey[64][j];
     7ae:	20 5f       	subi	r18, 0xF0	; 240
     7b0:	3f 4f       	sbci	r19, 0xFF	; 255
     7b2:	22 96       	adiw	r28, 0x02	; 2
     7b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     7b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     7b8:	22 97       	sbiw	r28, 0x02	; 2
     7ba:	5c 5f       	subi	r21, 0xFC	; 252
     7bc:	fa 01       	movw	r30, r20
     7be:	90 81       	ld	r25, Z
     7c0:	f9 01       	movw	r30, r18
     7c2:	90 83       	st	Z, r25
    trueRoundKey[9][j] = RoundKey[65][j];
     7c4:	20 5f       	subi	r18, 0xF0	; 240
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	22 96       	adiw	r28, 0x02	; 2
     7ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     7cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     7ce:	22 97       	sbiw	r28, 0x02	; 2
     7d0:	40 5f       	subi	r20, 0xF0	; 240
     7d2:	5b 4f       	sbci	r21, 0xFB	; 251
     7d4:	fa 01       	movw	r30, r20
     7d6:	90 81       	ld	r25, Z
     7d8:	f9 01       	movw	r30, r18
     7da:	90 83       	st	Z, r25
     7dc:	81 50       	subi	r24, 0x01	; 1
     7de:	22 96       	adiw	r28, 0x02	; 2
     7e0:	2e ad       	ldd	r18, Y+62	; 0x3e
     7e2:	3f ad       	ldd	r19, Y+63	; 0x3f
     7e4:	22 97       	sbiw	r28, 0x02	; 2
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	22 96       	adiw	r28, 0x02	; 2
     7ec:	2e af       	std	Y+62, r18	; 0x3e
     7ee:	3f af       	std	Y+63, r19	; 0x3f
     7f0:	22 97       	sbiw	r28, 0x02	; 2
     7f2:	11 96       	adiw	r26, 0x01	; 1
    {
      RoundKey[i][j] = stateDuringKS[j];
    }
  }
  
  for(j=0; j<16; j++)
     7f4:	81 11       	cpse	r24, r1
     7f6:	90 cf       	rjmp	.-224    	; 0x718 <kuznyechik_setkey+0x30e>
void kuznyechik_setkey(uint8_t* key)
{
  Key = key;

  KeyExpansion();
}
     7f8:	cf 5b       	subi	r28, 0xBF	; 191
     7fa:	df 4f       	sbci	r29, 0xFF	; 255
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	bf 90       	pop	r11
     812:	af 90       	pop	r10
     814:	9f 90       	pop	r9
     816:	8f 90       	pop	r8
     818:	7f 90       	pop	r7
     81a:	6f 90       	pop	r6
     81c:	5f 90       	pop	r5
     81e:	4f 90       	pop	r4
     820:	3f 90       	pop	r3
     822:	2f 90       	pop	r2
     824:	08 95       	ret

00000826 <kuznyechik_crypto>:

void kuznyechik_crypto(uint8_t* input)
{
     826:	2f 92       	push	r2
     828:	3f 92       	push	r3
     82a:	4f 92       	push	r4
     82c:	5f 92       	push	r5
     82e:	6f 92       	push	r6
     830:	7f 92       	push	r7
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	af 97       	sbiw	r28, 0x2f	; 47
     850:	cd bf       	out	0x3d, r28	; 61
     852:	de bf       	out	0x3e, r29	; 62
     854:	8c 01       	movw	r16, r24
  state = (state_t*)input;
     856:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <state>
     85a:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <state+0x1>
// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
  uint8_t round = 0;

  for(round = 0; round < 9; round++)
     85e:	f1 2c       	mov	r15, r1
     860:	1c 01       	movw	r2, r24
     862:	20 e1       	ldi	r18, 0x10	; 16
     864:	22 0e       	add	r2, r18
     866:	31 1c       	adc	r3, r1
     868:	ce 01       	movw	r24, r28
     86a:	41 96       	adiw	r24, 0x11	; 17
     86c:	89 8b       	std	Y+17, r24	; 0x11
     86e:	9a 8b       	std	Y+18, r25	; 0x12
  {
    AddRoundKey(round);
     870:	8f 2d       	mov	r24, r15
     872:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AddRoundKey>
     876:	d8 01       	movw	r26, r16
/* Private functions related to Sbox:                                        */
/*****************************************************************************/

static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
     878:	ec 91       	ld	r30, X
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	e0 50       	subi	r30, 0x00	; 0
     87e:	ff 4d       	sbci	r31, 0xDF	; 223
     880:	80 81       	ld	r24, Z
static void Sstep(void)
{
  uint8_t i;
  for(i = 0; i < 16; ++i)
  {
    (*state)[i] = getSBoxValue((*state)[i]);
     882:	8d 93       	st	X+, r24

// The SStep Function Substitutes the values in the current state with values in an S-box.
static void Sstep(void)
{
  uint8_t i;
  for(i = 0; i < 16; ++i)
     884:	a2 15       	cp	r26, r2
     886:	b3 05       	cpc	r27, r3
     888:	b9 f7       	brne	.-18     	; 0x878 <kuznyechik_crypto+0x52>
     88a:	90 e1       	ldi	r25, 0x10	; 16
     88c:	9b 8b       	std	Y+19, r25	; 0x13
     88e:	fe 01       	movw	r30, r28
     890:	31 96       	adiw	r30, 0x01	; 1
{
  uint8_t round = 0;

  for(round = 0; round < 9; round++)
  {
    AddRoundKey(round);
     892:	d8 01       	movw	r26, r16
{
    uint8_t i;
    state_t stateCopy;
    for(int j=0; j<16; j++)
    {
      stateCopy[j] = (*state)[j];
     894:	8d 91       	ld	r24, X+
     896:	81 93       	st	Z+, r24

static void Rstep(void)
{
    uint8_t i;
    state_t stateCopy;
    for(int j=0; j<16; j++)
     898:	69 88       	ldd	r6, Y+17	; 0x11
     89a:	7a 88       	ldd	r7, Y+18	; 0x12
     89c:	6e 16       	cp	r6, r30
     89e:	7f 06       	cpc	r7, r31
     8a0:	c9 f7       	brne	.-14     	; 0x894 <kuznyechik_crypto+0x6e>
    }
    for(i=0;i<16;i++)
    {
        if(i==0)
        {
            (*state)[i] = mult_mod_poly[4][stateCopy[0]] ^ mult_mod_poly[2][stateCopy[1]] ^ mult_mod_poly[3][stateCopy[2]] ^ mult_mod_poly[1][stateCopy[3]] ^ mult_mod_poly[6][stateCopy[4]] ^ mult_mod_poly[5][stateCopy[5]] ^ mult_mod_poly[0][stateCopy[6]] ^ mult_mod_poly[7][stateCopy[7]] ^ mult_mod_poly[0][stateCopy[8]] ^ mult_mod_poly[5][stateCopy[9]] ^ mult_mod_poly[6][stateCopy[10]] ^ mult_mod_poly[1][stateCopy[11]] ^ mult_mod_poly[3][stateCopy[12]] ^ mult_mod_poly[2][stateCopy[13]] ^ mult_mod_poly[4][stateCopy[14]] ^ mult_mod_poly[0][stateCopy[15]];
     8a2:	a9 80       	ldd	r10, Y+1	; 0x01
     8a4:	b1 2c       	mov	r11, r1
     8a6:	ca 80       	ldd	r12, Y+2	; 0x02
     8a8:	d1 2c       	mov	r13, r1
     8aa:	ab 81       	ldd	r26, Y+3	; 0x03
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	ec 81       	ldd	r30, Y+4	; 0x04
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	6d 81       	ldd	r22, Y+5	; 0x05
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	4e 81       	ldd	r20, Y+6	; 0x06
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	2f 81       	ldd	r18, Y+7	; 0x07
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	88 85       	ldd	r24, Y+8	; 0x08
     8c0:	88 2e       	mov	r8, r24
     8c2:	91 2c       	mov	r9, r1
     8c4:	8e a6       	std	Y+46, r8	; 0x2e
     8c6:	9f a6       	std	Y+47, r9	; 0x2f
     8c8:	e9 84       	ldd	r14, Y+9	; 0x09
     8ca:	8e 2d       	mov	r24, r14
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	8c 8b       	std	Y+20, r24	; 0x14
     8d0:	9d 8b       	std	Y+21, r25	; 0x15
     8d2:	6a 84       	ldd	r6, Y+10	; 0x0a
     8d4:	86 2c       	mov	r8, r6
     8d6:	91 2c       	mov	r9, r1
     8d8:	8e 8a       	std	Y+22, r8	; 0x16
     8da:	9f 8a       	std	Y+23, r9	; 0x17
     8dc:	eb 84       	ldd	r14, Y+11	; 0x0b
     8de:	8e 2d       	mov	r24, r14
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	88 8f       	std	Y+24, r24	; 0x18
     8e4:	99 8f       	std	Y+25, r25	; 0x19
     8e6:	ec 84       	ldd	r14, Y+12	; 0x0c
     8e8:	6e 2c       	mov	r6, r14
     8ea:	71 2c       	mov	r7, r1
     8ec:	6a 8e       	std	Y+26, r6	; 0x1a
     8ee:	7b 8e       	std	Y+27, r7	; 0x1b
     8f0:	4d 84       	ldd	r4, Y+13	; 0x0d
     8f2:	84 2c       	mov	r8, r4
     8f4:	91 2c       	mov	r9, r1
     8f6:	8c 8e       	std	Y+28, r8	; 0x1c
     8f8:	9d 8e       	std	Y+29, r9	; 0x1d
     8fa:	8e 84       	ldd	r8, Y+14	; 0x0e
     8fc:	91 2c       	mov	r9, r1
     8fe:	ef 84       	ldd	r14, Y+15	; 0x0f
     900:	8e 2d       	mov	r24, r14
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	8e 8f       	std	Y+30, r24	; 0x1e
     906:	9f 8f       	std	Y+31, r25	; 0x1f
     908:	e8 88       	ldd	r14, Y+16	; 0x10
     90a:	6e 2c       	mov	r6, r14
     90c:	71 2c       	mov	r7, r1
     90e:	68 a2       	std	Y+32, r6	; 0x20
     910:	79 a2       	std	Y+33, r7	; 0x21
     912:	2e 01       	movw	r4, r28
     914:	38 01       	movw	r6, r16
     916:	e1 2c       	mov	r14, r1
     918:	c5 01       	movw	r24, r10
     91a:	80 54       	subi	r24, 0x40	; 64
     91c:	97 4d       	sbci	r25, 0xD7	; 215
     91e:	8a a3       	std	Y+34, r24	; 0x22
     920:	9b a3       	std	Y+35, r25	; 0x23
     922:	c6 01       	movw	r24, r12
     924:	80 54       	subi	r24, 0x40	; 64
     926:	99 4d       	sbci	r25, 0xD9	; 217
     928:	8c a3       	std	Y+36, r24	; 0x24
     92a:	9d a3       	std	Y+37, r25	; 0x25
     92c:	cd 01       	movw	r24, r26
     92e:	80 54       	subi	r24, 0x40	; 64
     930:	98 4d       	sbci	r25, 0xD8	; 216
     932:	8e a3       	std	Y+38, r24	; 0x26
     934:	9f a3       	std	Y+39, r25	; 0x27
     936:	cf 01       	movw	r24, r30
     938:	80 54       	subi	r24, 0x40	; 64
     93a:	9a 4d       	sbci	r25, 0xDA	; 218
     93c:	88 a7       	std	Y+40, r24	; 0x28
     93e:	99 a7       	std	Y+41, r25	; 0x29
     940:	fb 01       	movw	r30, r22
     942:	e0 54       	subi	r30, 0x40	; 64
     944:	f5 4d       	sbci	r31, 0xD5	; 213
     946:	ea a7       	std	Y+42, r30	; 0x2a
     948:	fb a7       	std	Y+43, r31	; 0x2b
     94a:	ca 01       	movw	r24, r20
     94c:	80 54       	subi	r24, 0x40	; 64
     94e:	96 4d       	sbci	r25, 0xD6	; 214
     950:	8c a7       	std	Y+44, r24	; 0x2c
     952:	9d a7       	std	Y+45, r25	; 0x2d
     954:	f9 01       	movw	r30, r18
     956:	e0 54       	subi	r30, 0x40	; 64
     958:	fb 4d       	sbci	r31, 0xDB	; 219
     95a:	5f 01       	movw	r10, r30
     95c:	8e a5       	ldd	r24, Y+46	; 0x2e
     95e:	9f a5       	ldd	r25, Y+47	; 0x2f
     960:	80 54       	subi	r24, 0x40	; 64
     962:	94 4d       	sbci	r25, 0xD4	; 212
     964:	6c 01       	movw	r12, r24
     966:	6e 89       	ldd	r22, Y+22	; 0x16
     968:	7f 89       	ldd	r23, Y+23	; 0x17
     96a:	60 54       	subi	r22, 0x40	; 64
     96c:	76 4d       	sbci	r23, 0xD6	; 214
     96e:	48 8d       	ldd	r20, Y+24	; 0x18
     970:	59 8d       	ldd	r21, Y+25	; 0x19
     972:	40 54       	subi	r20, 0x40	; 64
     974:	55 4d       	sbci	r21, 0xD5	; 213
     976:	ea 8d       	ldd	r30, Y+26	; 0x1a
     978:	fb 8d       	ldd	r31, Y+27	; 0x1b
     97a:	e0 54       	subi	r30, 0x40	; 64
     97c:	fa 4d       	sbci	r31, 0xDA	; 218
     97e:	ee 8b       	std	Y+22, r30	; 0x16
     980:	ff 8b       	std	Y+23, r31	; 0x17
     982:	ac 8d       	ldd	r26, Y+28	; 0x1c
     984:	bd 8d       	ldd	r27, Y+29	; 0x1d
     986:	a0 54       	subi	r26, 0x40	; 64
     988:	b8 4d       	sbci	r27, 0xD8	; 216
     98a:	c4 01       	movw	r24, r8
     98c:	80 54       	subi	r24, 0x40	; 64
     98e:	99 4d       	sbci	r25, 0xD9	; 217
    {
      stateCopy[j] = (*state)[j];
    }
    for(i=0;i<16;i++)
    {
        if(i==0)
     990:	e1 10       	cpse	r14, r1
     992:	44 c0       	rjmp	.+136    	; 0xa1c <kuznyechik_crypto+0x1f6>
        {
            (*state)[i] = mult_mod_poly[4][stateCopy[0]] ^ mult_mod_poly[2][stateCopy[1]] ^ mult_mod_poly[3][stateCopy[2]] ^ mult_mod_poly[1][stateCopy[3]] ^ mult_mod_poly[6][stateCopy[4]] ^ mult_mod_poly[5][stateCopy[5]] ^ mult_mod_poly[0][stateCopy[6]] ^ mult_mod_poly[7][stateCopy[7]] ^ mult_mod_poly[0][stateCopy[8]] ^ mult_mod_poly[5][stateCopy[9]] ^ mult_mod_poly[6][stateCopy[10]] ^ mult_mod_poly[1][stateCopy[11]] ^ mult_mod_poly[3][stateCopy[12]] ^ mult_mod_poly[2][stateCopy[13]] ^ mult_mod_poly[4][stateCopy[14]] ^ mult_mod_poly[0][stateCopy[15]];
     994:	ea a1       	ldd	r30, Y+34	; 0x22
     996:	fb a1       	ldd	r31, Y+35	; 0x23
     998:	20 81       	ld	r18, Z
     99a:	ec a1       	ldd	r30, Y+36	; 0x24
     99c:	fd a1       	ldd	r31, Y+37	; 0x25
     99e:	30 81       	ld	r19, Z
     9a0:	23 27       	eor	r18, r19
     9a2:	ee a1       	ldd	r30, Y+38	; 0x26
     9a4:	ff a1       	ldd	r31, Y+39	; 0x27
     9a6:	90 80       	ld	r9, Z
     9a8:	92 26       	eor	r9, r18
     9aa:	e8 a5       	ldd	r30, Y+40	; 0x28
     9ac:	f9 a5       	ldd	r31, Y+41	; 0x29
     9ae:	30 81       	ld	r19, Z
     9b0:	93 26       	eor	r9, r19
     9b2:	ea a5       	ldd	r30, Y+42	; 0x2a
     9b4:	fb a5       	ldd	r31, Y+43	; 0x2b
     9b6:	30 81       	ld	r19, Z
     9b8:	93 26       	eor	r9, r19
     9ba:	ec a5       	ldd	r30, Y+44	; 0x2c
     9bc:	fd a5       	ldd	r31, Y+45	; 0x2d
     9be:	30 81       	ld	r19, Z
     9c0:	93 26       	eor	r9, r19
     9c2:	f5 01       	movw	r30, r10
     9c4:	30 81       	ld	r19, Z
     9c6:	93 26       	eor	r9, r19
     9c8:	f6 01       	movw	r30, r12
     9ca:	20 81       	ld	r18, Z
     9cc:	92 26       	eor	r9, r18
     9ce:	2c 89       	ldd	r18, Y+20	; 0x14
     9d0:	3d 89       	ldd	r19, Y+21	; 0x15
     9d2:	20 54       	subi	r18, 0x40	; 64
     9d4:	3b 4d       	sbci	r19, 0xDB	; 219
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	92 26       	eor	r9, r18
     9dc:	fb 01       	movw	r30, r22
     9de:	20 81       	ld	r18, Z
     9e0:	92 26       	eor	r9, r18
     9e2:	fa 01       	movw	r30, r20
     9e4:	20 81       	ld	r18, Z
     9e6:	92 26       	eor	r9, r18
     9e8:	ee 89       	ldd	r30, Y+22	; 0x16
     9ea:	ff 89       	ldd	r31, Y+23	; 0x17
     9ec:	20 81       	ld	r18, Z
     9ee:	92 26       	eor	r9, r18
     9f0:	2c 91       	ld	r18, X
     9f2:	92 26       	eor	r9, r18
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 81       	ld	r18, Z
     9f8:	92 26       	eor	r9, r18
     9fa:	2e 8d       	ldd	r18, Y+30	; 0x1e
     9fc:	3f 8d       	ldd	r19, Y+31	; 0x1f
     9fe:	20 54       	subi	r18, 0x40	; 64
     a00:	37 4d       	sbci	r19, 0xD7	; 215
     a02:	f9 01       	movw	r30, r18
     a04:	20 81       	ld	r18, Z
     a06:	92 26       	eor	r9, r18
     a08:	28 a1       	ldd	r18, Y+32	; 0x20
     a0a:	39 a1       	ldd	r19, Y+33	; 0x21
     a0c:	20 54       	subi	r18, 0x40	; 64
     a0e:	3b 4d       	sbci	r19, 0xDB	; 219
     a10:	f9 01       	movw	r30, r18
     a12:	20 81       	ld	r18, Z
     a14:	92 26       	eor	r9, r18
     a16:	f8 01       	movw	r30, r16
     a18:	90 82       	st	Z, r9
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <kuznyechik_crypto+0x1fe>
        }
        else
        {
            (*state)[i] = stateCopy[i-1];
     a1c:	f2 01       	movw	r30, r4
     a1e:	20 81       	ld	r18, Z
     a20:	f3 01       	movw	r30, r6
     a22:	20 83       	st	Z, r18
    state_t stateCopy;
    for(int j=0; j<16; j++)
    {
      stateCopy[j] = (*state)[j];
    }
    for(i=0;i<16;i++)
     a24:	e3 94       	inc	r14
     a26:	ff ef       	ldi	r31, 0xFF	; 255
     a28:	4f 1a       	sub	r4, r31
     a2a:	5f 0a       	sbc	r5, r31
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	62 1a       	sub	r6, r18
     a30:	72 0a       	sbc	r7, r18
     a32:	e0 e1       	ldi	r30, 0x10	; 16
     a34:	ee 12       	cpse	r14, r30
     a36:	ac cf       	rjmp	.-168    	; 0x990 <kuznyechik_crypto+0x16a>
     a38:	fb 89       	ldd	r31, Y+19	; 0x13
     a3a:	f1 50       	subi	r31, 0x01	; 1
     a3c:	fb 8b       	std	Y+19, r31	; 0x13
/*****************************************************************************/

static void Lstep(void)
{
    uint8_t i;
    for(i=0;i<16;i++)
     a3e:	f1 11       	cpse	r31, r1
     a40:	26 cf       	rjmp	.-436    	; 0x88e <kuznyechik_crypto+0x68>
// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
  uint8_t round = 0;

  for(round = 0; round < 9; round++)
     a42:	f3 94       	inc	r15
     a44:	89 e0       	ldi	r24, 0x09	; 9
     a46:	68 2e       	mov	r6, r24
     a48:	f6 10       	cpse	r15, r6
     a4a:	12 cf       	rjmp	.-476    	; 0x870 <kuznyechik_crypto+0x4a>
    AddRoundKey(round);
    Sstep();
    Lstep();
  }
  
  AddRoundKey(9);
     a4c:	89 e0       	ldi	r24, 0x09	; 9

void kuznyechik_crypto(uint8_t* input)
{
  state = (state_t*)input;
  Cipher();
}
     a4e:	af 96       	adiw	r28, 0x2f	; 47
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
     a6a:	8f 90       	pop	r8
     a6c:	7f 90       	pop	r7
     a6e:	6f 90       	pop	r6
     a70:	5f 90       	pop	r5
     a72:	4f 90       	pop	r4
     a74:	3f 90       	pop	r3
     a76:	2f 90       	pop	r2
    AddRoundKey(round);
    Sstep();
    Lstep();
  }
  
  AddRoundKey(9);
     a78:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <AddRoundKey>

00000a7c <kuznyechik_decrypto>:
  state = (state_t*)input;
  Cipher();
}

void kuznyechik_decrypto(uint8_t* input)
{
     a7c:	2f 92       	push	r2
     a7e:	3f 92       	push	r3
     a80:	4f 92       	push	r4
     a82:	5f 92       	push	r5
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	af 97       	sbiw	r28, 0x2f	; 47
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	8c 01       	movw	r16, r24
  state = (state_t*)input;
     aac:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <state>
     ab0:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <state+0x1>

static void InvCipher(void)
{
  uint8_t round=0;

  for(round=9;round>0;round--)
     ab4:	89 e0       	ldi	r24, 0x09	; 9
     ab6:	f8 2e       	mov	r15, r24
     ab8:	9e 01       	movw	r18, r28
     aba:	2f 5e       	subi	r18, 0xEF	; 239
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	29 8b       	std	Y+17, r18	; 0x11
     ac0:	3a 8b       	std	Y+18, r19	; 0x12
     ac2:	a8 01       	movw	r20, r16
     ac4:	40 5f       	subi	r20, 0xF0	; 240
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	4e a7       	std	Y+46, r20	; 0x2e
     aca:	5f a7       	std	Y+47, r21	; 0x2f
  {
    AddRoundKey(round);
     acc:	8f 2d       	mov	r24, r15
     ace:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AddRoundKey>
     ad2:	50 e1       	ldi	r21, 0x10	; 16
     ad4:	5b 8b       	std	Y+19, r21	; 0x13
     ad6:	18 01       	movw	r2, r16
     ad8:	ae 01       	movw	r20, r28
     ada:	4f 5f       	subi	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	4a 01       	movw	r8, r20

static void InvCipher(void)
{
  uint8_t round=0;

  for(round=9;round>0;round--)
     ae0:	fa 01       	movw	r30, r20
     ae2:	d8 01       	movw	r26, r16
{
    uint8_t i;
    state_t stateCopy;
    for(int j=0; j<16; j++)
    {
      stateCopy[j] = (*state)[j];
     ae4:	8d 91       	ld	r24, X+
     ae6:	81 93       	st	Z+, r24

static void InvRstep(void)
{
    uint8_t i;
    state_t stateCopy;
    for(int j=0; j<16; j++)
     ae8:	49 88       	ldd	r4, Y+17	; 0x11
     aea:	5a 88       	ldd	r5, Y+18	; 0x12
     aec:	e4 15       	cp	r30, r4
     aee:	f5 05       	cpc	r31, r5
     af0:	c9 f7       	brne	.-14     	; 0xae4 <kuznyechik_decrypto+0x68>
    }
    for(i=0;i<16;i++)
    {
        if(i==15)
        {
            (*state)[i] = mult_mod_poly[4][stateCopy[1]] ^ mult_mod_poly[2][stateCopy[2]] ^ mult_mod_poly[3][stateCopy[3]] ^ mult_mod_poly[1][stateCopy[4]] ^ mult_mod_poly[6][stateCopy[5]] ^ mult_mod_poly[5][stateCopy[6]] ^ mult_mod_poly[0][stateCopy[7]] ^ mult_mod_poly[7][stateCopy[8]] ^ mult_mod_poly[0][stateCopy[9]] ^ mult_mod_poly[5][stateCopy[10]] ^ mult_mod_poly[6][stateCopy[11]] ^ mult_mod_poly[1][stateCopy[12]] ^ mult_mod_poly[3][stateCopy[13]] ^ mult_mod_poly[2][stateCopy[14]] ^ mult_mod_poly[4][stateCopy[15]] ^ mult_mod_poly[0][stateCopy[0]];
     af2:	aa 80       	ldd	r10, Y+2	; 0x02
     af4:	b1 2c       	mov	r11, r1
     af6:	cb 80       	ldd	r12, Y+3	; 0x03
     af8:	d1 2c       	mov	r13, r1
     afa:	ac 81       	ldd	r26, Y+4	; 0x04
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	ed 81       	ldd	r30, Y+5	; 0x05
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	6e 81       	ldd	r22, Y+6	; 0x06
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	4f 81       	ldd	r20, Y+7	; 0x07
     b08:	24 2f       	mov	r18, r20
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	2c a7       	std	Y+44, r18	; 0x2c
     b0e:	3d a7       	std	Y+45, r19	; 0x2d
     b10:	68 84       	ldd	r6, Y+8	; 0x08
     b12:	71 2c       	mov	r7, r1
     b14:	89 85       	ldd	r24, Y+9	; 0x09
     b16:	48 2f       	mov	r20, r24
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	4c 8b       	std	Y+20, r20	; 0x14
     b1c:	5d 8b       	std	Y+21, r21	; 0x15
     b1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b20:	48 2e       	mov	r4, r24
     b22:	51 2c       	mov	r5, r1
     b24:	4e 8a       	std	Y+22, r4	; 0x16
     b26:	5f 8a       	std	Y+23, r5	; 0x17
     b28:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2a:	28 2f       	mov	r18, r24
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	28 8f       	std	Y+24, r18	; 0x18
     b30:	39 8f       	std	Y+25, r19	; 0x19
     b32:	4c 84       	ldd	r4, Y+12	; 0x0c
     b34:	44 2d       	mov	r20, r4
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	4a 8f       	std	Y+26, r20	; 0x1a
     b3a:	5b 8f       	std	Y+27, r21	; 0x1b
     b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b3e:	48 2e       	mov	r4, r24
     b40:	51 2c       	mov	r5, r1
     b42:	4c 8e       	std	Y+28, r4	; 0x1c
     b44:	5d 8e       	std	Y+29, r5	; 0x1d
     b46:	8e 85       	ldd	r24, Y+14	; 0x0e
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	e8 88       	ldd	r14, Y+16	; 0x10
     b50:	4e 2d       	mov	r20, r14
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	4e 8f       	std	Y+30, r20	; 0x1e
     b56:	5f 8f       	std	Y+31, r21	; 0x1f
     b58:	e9 80       	ldd	r14, Y+1	; 0x01
     b5a:	4e 2c       	mov	r4, r14
     b5c:	51 2c       	mov	r5, r1
     b5e:	48 a2       	std	Y+32, r4	; 0x20
     b60:	59 a2       	std	Y+33, r5	; 0x21
     b62:	28 01       	movw	r4, r16
     b64:	e1 2c       	mov	r14, r1
     b66:	a5 01       	movw	r20, r10
     b68:	40 54       	subi	r20, 0x40	; 64
     b6a:	57 4d       	sbci	r21, 0xD7	; 215
     b6c:	4a a3       	std	Y+34, r20	; 0x22
     b6e:	5b a3       	std	Y+35, r21	; 0x23
     b70:	a6 01       	movw	r20, r12
     b72:	40 54       	subi	r20, 0x40	; 64
     b74:	59 4d       	sbci	r21, 0xD9	; 217
     b76:	4c a3       	std	Y+36, r20	; 0x24
     b78:	5d a3       	std	Y+37, r21	; 0x25
     b7a:	ad 01       	movw	r20, r26
     b7c:	40 54       	subi	r20, 0x40	; 64
     b7e:	58 4d       	sbci	r21, 0xD8	; 216
     b80:	4e a3       	std	Y+38, r20	; 0x26
     b82:	5f a3       	std	Y+39, r21	; 0x27
     b84:	df 01       	movw	r26, r30
     b86:	a0 54       	subi	r26, 0x40	; 64
     b88:	ba 4d       	sbci	r27, 0xDA	; 218
     b8a:	a8 a7       	std	Y+40, r26	; 0x28
     b8c:	b9 a7       	std	Y+41, r27	; 0x29
     b8e:	fb 01       	movw	r30, r22
     b90:	e0 54       	subi	r30, 0x40	; 64
     b92:	f5 4d       	sbci	r31, 0xD5	; 213
     b94:	ea a7       	std	Y+42, r30	; 0x2a
     b96:	fb a7       	std	Y+43, r31	; 0x2b
     b98:	4c a5       	ldd	r20, Y+44	; 0x2c
     b9a:	5d a5       	ldd	r21, Y+45	; 0x2d
     b9c:	40 54       	subi	r20, 0x40	; 64
     b9e:	56 4d       	sbci	r21, 0xD6	; 214
     ba0:	4c a7       	std	Y+44, r20	; 0x2c
     ba2:	5d a7       	std	Y+45, r21	; 0x2d
     ba4:	d3 01       	movw	r26, r6
     ba6:	a0 54       	subi	r26, 0x40	; 64
     ba8:	bb 4d       	sbci	r27, 0xDB	; 219
     baa:	3d 01       	movw	r6, r26
     bac:	ec 89       	ldd	r30, Y+20	; 0x14
     bae:	fd 89       	ldd	r31, Y+21	; 0x15
     bb0:	e0 54       	subi	r30, 0x40	; 64
     bb2:	f4 4d       	sbci	r31, 0xD4	; 212
     bb4:	6f 01       	movw	r12, r30
     bb6:	68 8d       	ldd	r22, Y+24	; 0x18
     bb8:	79 8d       	ldd	r23, Y+25	; 0x19
     bba:	60 54       	subi	r22, 0x40	; 64
     bbc:	76 4d       	sbci	r23, 0xD6	; 214
     bbe:	4a 8d       	ldd	r20, Y+26	; 0x1a
     bc0:	5b 8d       	ldd	r21, Y+27	; 0x1b
     bc2:	40 54       	subi	r20, 0x40	; 64
     bc4:	55 4d       	sbci	r21, 0xD5	; 213
     bc6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bc8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bca:	a0 54       	subi	r26, 0x40	; 64
     bcc:	ba 4d       	sbci	r27, 0xDA	; 218
     bce:	80 54       	subi	r24, 0x40	; 64
     bd0:	98 4d       	sbci	r25, 0xD8	; 216
     bd2:	20 54       	subi	r18, 0x40	; 64
     bd4:	39 4d       	sbci	r19, 0xD9	; 217
    {
      stateCopy[j] = (*state)[j];
    }
    for(i=0;i<16;i++)
    {
        if(i==15)
     bd6:	ff e0       	ldi	r31, 0x0F	; 15
     bd8:	ef 12       	cpse	r14, r31
     bda:	40 c0       	rjmp	.+128    	; 0xc5c <kuznyechik_decrypto+0x1e0>
        {
            (*state)[i] = mult_mod_poly[4][stateCopy[1]] ^ mult_mod_poly[2][stateCopy[2]] ^ mult_mod_poly[3][stateCopy[3]] ^ mult_mod_poly[1][stateCopy[4]] ^ mult_mod_poly[6][stateCopy[5]] ^ mult_mod_poly[5][stateCopy[6]] ^ mult_mod_poly[0][stateCopy[7]] ^ mult_mod_poly[7][stateCopy[8]] ^ mult_mod_poly[0][stateCopy[9]] ^ mult_mod_poly[5][stateCopy[10]] ^ mult_mod_poly[6][stateCopy[11]] ^ mult_mod_poly[1][stateCopy[12]] ^ mult_mod_poly[3][stateCopy[13]] ^ mult_mod_poly[2][stateCopy[14]] ^ mult_mod_poly[4][stateCopy[15]] ^ mult_mod_poly[0][stateCopy[0]];
     bdc:	ea a1       	ldd	r30, Y+34	; 0x22
     bde:	fb a1       	ldd	r31, Y+35	; 0x23
     be0:	b0 80       	ld	r11, Z
     be2:	ec a1       	ldd	r30, Y+36	; 0x24
     be4:	fd a1       	ldd	r31, Y+37	; 0x25
     be6:	a0 80       	ld	r10, Z
     be8:	ab 24       	eor	r10, r11
     bea:	ee a1       	ldd	r30, Y+38	; 0x26
     bec:	ff a1       	ldd	r31, Y+39	; 0x27
     bee:	b0 80       	ld	r11, Z
     bf0:	ba 24       	eor	r11, r10
     bf2:	e8 a5       	ldd	r30, Y+40	; 0x28
     bf4:	f9 a5       	ldd	r31, Y+41	; 0x29
     bf6:	a0 80       	ld	r10, Z
     bf8:	ba 24       	eor	r11, r10
     bfa:	ea a5       	ldd	r30, Y+42	; 0x2a
     bfc:	fb a5       	ldd	r31, Y+43	; 0x2b
     bfe:	a0 80       	ld	r10, Z
     c00:	ba 24       	eor	r11, r10
     c02:	ec a5       	ldd	r30, Y+44	; 0x2c
     c04:	fd a5       	ldd	r31, Y+45	; 0x2d
     c06:	a0 80       	ld	r10, Z
     c08:	ba 24       	eor	r11, r10
     c0a:	f3 01       	movw	r30, r6
     c0c:	a0 80       	ld	r10, Z
     c0e:	ba 24       	eor	r11, r10
     c10:	f6 01       	movw	r30, r12
     c12:	a0 80       	ld	r10, Z
     c14:	ba 24       	eor	r11, r10
     c16:	ee 89       	ldd	r30, Y+22	; 0x16
     c18:	ff 89       	ldd	r31, Y+23	; 0x17
     c1a:	e0 54       	subi	r30, 0x40	; 64
     c1c:	fb 4d       	sbci	r31, 0xDB	; 219
     c1e:	e0 81       	ld	r30, Z
     c20:	be 26       	eor	r11, r30
     c22:	fb 01       	movw	r30, r22
     c24:	a0 80       	ld	r10, Z
     c26:	ba 24       	eor	r11, r10
     c28:	fa 01       	movw	r30, r20
     c2a:	a0 80       	ld	r10, Z
     c2c:	ba 24       	eor	r11, r10
     c2e:	ec 91       	ld	r30, X
     c30:	be 26       	eor	r11, r30
     c32:	fc 01       	movw	r30, r24
     c34:	a0 80       	ld	r10, Z
     c36:	ba 24       	eor	r11, r10
     c38:	f9 01       	movw	r30, r18
     c3a:	a0 80       	ld	r10, Z
     c3c:	ba 24       	eor	r11, r10
     c3e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c40:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c42:	e0 54       	subi	r30, 0x40	; 64
     c44:	f7 4d       	sbci	r31, 0xD7	; 215
     c46:	e0 81       	ld	r30, Z
     c48:	be 26       	eor	r11, r30
     c4a:	e8 a1       	ldd	r30, Y+32	; 0x20
     c4c:	f9 a1       	ldd	r31, Y+33	; 0x21
     c4e:	e0 54       	subi	r30, 0x40	; 64
     c50:	fb 4d       	sbci	r31, 0xDB	; 219
     c52:	e0 81       	ld	r30, Z
     c54:	be 26       	eor	r11, r30
     c56:	f8 01       	movw	r30, r16
     c58:	b7 86       	std	Z+15, r11	; 0x0f
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <kuznyechik_decrypto+0x1e8>
        }
        else
        {
            (*state)[i] = stateCopy[i+1];
     c5c:	f4 01       	movw	r30, r8
     c5e:	b1 80       	ldd	r11, Z+1	; 0x01
     c60:	f2 01       	movw	r30, r4
     c62:	b0 82       	st	Z, r11
    state_t stateCopy;
    for(int j=0; j<16; j++)
    {
      stateCopy[j] = (*state)[j];
    }
    for(i=0;i<16;i++)
     c64:	e3 94       	inc	r14
     c66:	ff ef       	ldi	r31, 0xFF	; 255
     c68:	8f 1a       	sub	r8, r31
     c6a:	9f 0a       	sbc	r9, r31
     c6c:	ef ef       	ldi	r30, 0xFF	; 255
     c6e:	4e 1a       	sub	r4, r30
     c70:	5e 0a       	sbc	r5, r30
     c72:	f0 e1       	ldi	r31, 0x10	; 16
     c74:	ef 12       	cpse	r14, r31
     c76:	af cf       	rjmp	.-162    	; 0xbd6 <kuznyechik_decrypto+0x15a>
     c78:	2b 89       	ldd	r18, Y+19	; 0x13
     c7a:	21 50       	subi	r18, 0x01	; 1
     c7c:	2b 8b       	std	Y+19, r18	; 0x13
}

static void InvLstep(void)
{
    uint8_t i;
    for(i=0;i<16;i++)
     c7e:	21 11       	cpse	r18, r1
     c80:	2a cf       	rjmp	.-428    	; 0xad6 <kuznyechik_decrypto+0x5a>
  return sbox[num];
}

static uint8_t getSBoxInvert(uint8_t num)
{
  return rsbox[num];
     c82:	d1 01       	movw	r26, r2
     c84:	ec 91       	ld	r30, X
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	e0 50       	subi	r30, 0x00	; 0
     c8a:	f0 4e       	sbci	r31, 0xE0	; 224
     c8c:	80 81       	ld	r24, Z
static void InvSstep(void)
{
  uint8_t i;
  for(i=0;i<16;++i)
  {
    (*state)[i] = getSBoxInvert((*state)[i]);
     c8e:	f1 01       	movw	r30, r2
     c90:	81 93       	st	Z+, r24
     c92:	1f 01       	movw	r2, r30

// Inverse Sstep
static void InvSstep(void)
{
  uint8_t i;
  for(i=0;i<16;++i)
     c94:	4e a4       	ldd	r4, Y+46	; 0x2e
     c96:	5f a4       	ldd	r5, Y+47	; 0x2f
     c98:	4e 16       	cp	r4, r30
     c9a:	5f 06       	cpc	r5, r31
     c9c:	91 f7       	brne	.-28     	; 0xc82 <kuznyechik_decrypto+0x206>

static void InvCipher(void)
{
  uint8_t round=0;

  for(round=9;round>0;round--)
     c9e:	fa 94       	dec	r15
     ca0:	f1 10       	cpse	r15, r1
     ca2:	14 cf       	rjmp	.-472    	; 0xacc <kuznyechik_decrypto+0x50>
  {
    AddRoundKey(round);
    InvLstep();
    InvSstep();
  }
  AddRoundKey(0);
     ca4:	80 e0       	ldi	r24, 0x00	; 0

void kuznyechik_decrypto(uint8_t* input)
{
  state = (state_t*)input;
  InvCipher();
}
     ca6:	af 96       	adiw	r28, 0x2f	; 47
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	8f 90       	pop	r8
     cc4:	7f 90       	pop	r7
     cc6:	6f 90       	pop	r6
     cc8:	5f 90       	pop	r5
     cca:	4f 90       	pop	r4
     ccc:	3f 90       	pop	r3
     cce:	2f 90       	pop	r2
  {
    AddRoundKey(round);
    InvLstep();
    InvSstep();
  }
  AddRoundKey(0);
     cd0:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <AddRoundKey>

00000cd4 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return 0x00;
}
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	08 95       	ret

00000cd8 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
     cd8:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
     cda:	fa 01       	movw	r30, r20
     cdc:	9f 01       	movw	r18, r30
     cde:	24 1b       	sub	r18, r20
     ce0:	35 0b       	sbc	r19, r21
     ce2:	28 17       	cp	r18, r24
     ce4:	39 07       	cpc	r19, r25
     ce6:	d4 f5       	brge	.+116    	; 0xd5c <hex_decode+0x84>
	{
		char n_hi = ascii_buf[2*i];
     ce8:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	3c 91       	ld	r19, X
     cee:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
     cf0:	60 ed       	ldi	r22, 0xD0	; 208
     cf2:	63 0f       	add	r22, r19
     cf4:	6a 30       	cpi	r22, 0x0A	; 10
     cf6:	10 f4       	brcc	.+4      	; 0xcfc <hex_decode+0x24>
			data_buf[i] = n_lo - '0';
     cf8:	60 83       	st	Z, r22
     cfa:	0f c0       	rjmp	.+30     	; 0xd1a <hex_decode+0x42>
		else if(n_lo >= 'A' && n_lo <= 'F')
     cfc:	6f eb       	ldi	r22, 0xBF	; 191
     cfe:	63 0f       	add	r22, r19
     d00:	66 30       	cpi	r22, 0x06	; 6
     d02:	10 f4       	brcc	.+4      	; 0xd08 <hex_decode+0x30>
			data_buf[i] = n_lo - 'A' + 10;
     d04:	37 53       	subi	r19, 0x37	; 55
     d06:	08 c0       	rjmp	.+16     	; 0xd18 <hex_decode+0x40>
		else if(n_lo >= 'a' && n_lo <= 'f')
     d08:	6f e9       	ldi	r22, 0x9F	; 159
     d0a:	63 0f       	add	r22, r19
     d0c:	66 30       	cpi	r22, 0x06	; 6
     d0e:	18 f0       	brcs	.+6      	; 0xd16 <hex_decode+0x3e>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
     d16:	37 55       	subi	r19, 0x57	; 87
     d18:	30 83       	st	Z, r19
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
     d1a:	30 ed       	ldi	r19, 0xD0	; 208
     d1c:	32 0f       	add	r19, r18
     d1e:	3a 30       	cpi	r19, 0x0A	; 10
     d20:	18 f4       	brcc	.+6      	; 0xd28 <hex_decode+0x50>
			data_buf[i] |= (n_hi - '0') << 4;
     d22:	22 95       	swap	r18
     d24:	20 7f       	andi	r18, 0xF0	; 240
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <hex_decode+0x78>
		else if(n_hi >= 'A' && n_hi <= 'F')
     d28:	3f eb       	ldi	r19, 0xBF	; 191
     d2a:	32 0f       	add	r19, r18
     d2c:	36 30       	cpi	r19, 0x06	; 6
     d2e:	20 f4       	brcc	.+8      	; 0xd38 <hex_decode+0x60>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	27 53       	subi	r18, 0x37	; 55
     d34:	31 09       	sbc	r19, r1
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <hex_decode+0x6e>
		else if(n_hi >= 'a' && n_hi <= 'f')
     d38:	3f e9       	ldi	r19, 0x9F	; 159
     d3a:	32 0f       	add	r19, r18
     d3c:	36 30       	cpi	r19, 0x06	; 6
     d3e:	40 f7       	brcc	.-48     	; 0xd10 <hex_decode+0x38>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	27 55       	subi	r18, 0x57	; 87
     d44:	31 09       	sbc	r19, r1
     d46:	64 e0       	ldi	r22, 0x04	; 4
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	6a 95       	dec	r22
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <hex_decode+0x70>
     d50:	30 81       	ld	r19, Z
     d52:	23 2b       	or	r18, r19
     d54:	20 83       	st	Z, r18
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	12 96       	adiw	r26, 0x02	; 2
     d5a:	c0 cf       	rjmp	.-128    	; 0xcdc <hex_decode+0x4>
		else
			return 1;
	}

	return 0;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
}
     d60:	08 95       	ret

00000d62 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
     d62:	20 91 04 31 	lds	r18, 0x3104	; 0x803104 <num_commands>
     d66:	30 91 05 31 	lds	r19, 0x3105	; 0x803105 <num_commands+0x1>
     d6a:	2a 30       	cpi	r18, 0x0A	; 10
     d6c:	31 05       	cpc	r19, r1
     d6e:	cc f4       	brge	.+50     	; 0xda2 <simpleserial_addcmd+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
     d70:	60 34       	cpi	r22, 0x40	; 64
     d72:	71 05       	cpc	r23, r1
     d74:	b0 f4       	brcc	.+44     	; 0xda2 <simpleserial_addcmd+0x40>
		return 1;

	commands[num_commands].c   = c;
     d76:	95 e0       	ldi	r25, 0x05	; 5
     d78:	92 9f       	mul	r25, r18
     d7a:	f0 01       	movw	r30, r0
     d7c:	93 9f       	mul	r25, r19
     d7e:	f0 0d       	add	r31, r0
     d80:	11 24       	eor	r1, r1
     d82:	ea 5f       	subi	r30, 0xFA	; 250
     d84:	fe 4c       	sbci	r31, 0xCE	; 206
     d86:	80 83       	st	Z, r24
	commands[num_commands].len = len;
     d88:	61 83       	std	Z+1, r22	; 0x01
     d8a:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
     d8c:	43 83       	std	Z+3, r20	; 0x03
     d8e:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
     d90:	2f 5f       	subi	r18, 0xFF	; 255
     d92:	3f 4f       	sbci	r19, 0xFF	; 255
     d94:	20 93 04 31 	sts	0x3104, r18	; 0x803104 <num_commands>
     d98:	30 93 05 31 	sts	0x3105, r19	; 0x803105 <num_commands+0x1>

	return 0;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	08 95       	ret
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
     da6:	08 95       	ret

00000da8 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
     da8:	4a e6       	ldi	r20, 0x6A	; 106
     daa:	56 e0       	ldi	r21, 0x06	; 6
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	86 e7       	ldi	r24, 0x76	; 118
     db2:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <simpleserial_addcmd>

00000db6 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	8b 01       	movw	r16, r22
     dc8:	ea 01       	movw	r28, r20
	// Write first character
	putch(c);
     dca:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
     dce:	7e 01       	movw	r14, r28
     dd0:	c7 01       	movw	r24, r14
     dd2:	8c 1b       	sub	r24, r28
     dd4:	9d 0b       	sbc	r25, r29
     dd6:	80 17       	cp	r24, r16
     dd8:	91 07       	cpc	r25, r17
     dda:	b4 f4       	brge	.+44     	; 0xe08 <simpleserial_put+0x52>
     ddc:	67 01       	movw	r12, r14
	{
		putch(hex_lookup[output[i] >> 4 ]);
     dde:	d7 01       	movw	r26, r14
     de0:	ed 91       	ld	r30, X+
     de2:	7d 01       	movw	r14, r26
     de4:	e2 95       	swap	r30
     de6:	ef 70       	andi	r30, 0x0F	; 15
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	e0 54       	subi	r30, 0x40	; 64
     dec:	f3 4d       	sbci	r31, 0xD3	; 211
     dee:	80 81       	ld	r24, Z
     df0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
     df4:	d6 01       	movw	r26, r12
     df6:	ec 91       	ld	r30, X
     df8:	ef 70       	andi	r30, 0x0F	; 15
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	e0 54       	subi	r30, 0x40	; 64
     dfe:	f3 4d       	sbci	r31, 0xD3	; 211
     e00:	80 81       	ld	r24, Z
     e02:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
     e06:	e4 cf       	rjmp	.-56     	; 0xdd0 <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
     e08:	8a e0       	ldi	r24, 0x0A	; 10
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
     e1a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <output_ch_0>

00000e1e <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	c1 5c       	subi	r28, 0xC1	; 193
     e38:	d1 09       	sbc	r29, r1
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
     e3e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
     e42:	40 91 04 31 	lds	r20, 0x3104	; 0x803104 <num_commands>
     e46:	50 91 05 31 	lds	r21, 0x3105	; 0x803105 <num_commands+0x1>
     e4a:	26 e0       	ldi	r18, 0x06	; 6
     e4c:	31 e3       	ldi	r19, 0x31	; 49
     e4e:	00 e0       	ldi	r16, 0x00	; 0
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	04 17       	cp	r16, r20
     e54:	15 07       	cpc	r17, r21
     e56:	54 f4       	brge	.+20     	; 0xe6c <simpleserial_get+0x4e>
     e58:	2b 5f       	subi	r18, 0xFB	; 251
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(commands[cmd].c == c)
     e5c:	f9 01       	movw	r30, r18
     e5e:	35 97       	sbiw	r30, 0x05	; 5
     e60:	90 81       	ld	r25, Z
     e62:	89 17       	cp	r24, r25
     e64:	39 f0       	breq	.+14     	; 0xe74 <simpleserial_get+0x56>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
     e66:	0f 5f       	subi	r16, 0xFF	; 255
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	f3 cf       	rjmp	.-26     	; 0xe52 <simpleserial_get+0x34>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
     e6c:	04 17       	cp	r16, r20
     e6e:	15 07       	cpc	r17, r21
     e70:	09 f4       	brne	.+2      	; 0xe74 <simpleserial_get+0x56>
     e72:	54 c0       	rjmp	.+168    	; 0xf1c <simpleserial_get+0xfe>
     e74:	9e 01       	movw	r18, r28
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	79 01       	movw	r14, r18

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
     e7c:	69 01       	movw	r12, r18
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
     e7e:	25 e0       	ldi	r18, 0x05	; 5
     e80:	20 9f       	mul	r18, r16
     e82:	c0 01       	movw	r24, r0
     e84:	21 9f       	mul	r18, r17
     e86:	90 0d       	add	r25, r0
     e88:	11 24       	eor	r1, r1
     e8a:	dc 01       	movw	r26, r24
     e8c:	a9 5f       	subi	r26, 0xF9	; 249
     e8e:	be 4c       	sbci	r27, 0xCE	; 206
     e90:	5d 01       	movw	r10, r26
     e92:	d5 01       	movw	r26, r10
     e94:	8d 91       	ld	r24, X+
     e96:	9c 91       	ld	r25, X
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	96 01       	movw	r18, r12
     e9e:	2e 19       	sub	r18, r14
     ea0:	3f 09       	sbc	r19, r15
     ea2:	28 17       	cp	r18, r24
     ea4:	39 07       	cpc	r19, r25
     ea6:	50 f4       	brcc	.+20     	; 0xebc <simpleserial_get+0x9e>
	{
		c = getch();
     ea8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
     eac:	8a 30       	cpi	r24, 0x0A	; 10
     eae:	b1 f1       	breq	.+108    	; 0xf1c <simpleserial_get+0xfe>
     eb0:	8d 30       	cpi	r24, 0x0D	; 13
     eb2:	a1 f1       	breq	.+104    	; 0xf1c <simpleserial_get+0xfe>
			return;

		ascii_buf[i] = c;
     eb4:	f6 01       	movw	r30, r12
     eb6:	81 93       	st	Z+, r24
     eb8:	6f 01       	movw	r12, r30
     eba:	eb cf       	rjmp	.-42     	; 0xe92 <simpleserial_get+0x74>
	}

	// Assert that last character is \n or \r
	c = getch();
     ebc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <input_ch_0>
	if(c != '\n' && c != '\r')
     ec0:	8a 30       	cpi	r24, 0x0A	; 10
     ec2:	11 f0       	breq	.+4      	; 0xec8 <simpleserial_get+0xaa>
     ec4:	8d 30       	cpi	r24, 0x0D	; 13
     ec6:	51 f5       	brne	.+84     	; 0xf1c <simpleserial_get+0xfe>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
     ec8:	25 e0       	ldi	r18, 0x05	; 5
     eca:	20 9f       	mul	r18, r16
     ecc:	c0 01       	movw	r24, r0
     ece:	21 9f       	mul	r18, r17
     ed0:	90 0d       	add	r25, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	8c 01       	movw	r16, r24
     ed6:	0a 5f       	subi	r16, 0xFA	; 250
     ed8:	1e 4c       	sbci	r17, 0xCE	; 206
     eda:	ae 01       	movw	r20, r28
     edc:	4f 57       	subi	r20, 0x7F	; 127
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	b7 01       	movw	r22, r14
     ee2:	f8 01       	movw	r30, r16
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	92 81       	ldd	r25, Z+2	; 0x02
     ee8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <hex_decode>
     eec:	89 2b       	or	r24, r25
     eee:	b1 f4       	brne	.+44     	; 0xf1c <simpleserial_get+0xfe>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
     ef0:	d8 01       	movw	r26, r16
     ef2:	13 96       	adiw	r26, 0x03	; 3
     ef4:	ed 91       	ld	r30, X+
     ef6:	fc 91       	ld	r31, X
     ef8:	14 97       	sbiw	r26, 0x04	; 4
     efa:	ce 01       	movw	r24, r28
     efc:	8f 57       	subi	r24, 0x7F	; 127
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	19 95       	eicall
     f02:	cf 53       	subi	r28, 0x3F	; 63
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	88 83       	st	Y, r24
     f08:	c1 5c       	subi	r28, 0xC1	; 193
     f0a:	d0 40       	sbci	r29, 0x00	; 0
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
     f0c:	ae 01       	movw	r20, r28
     f0e:	4f 53       	subi	r20, 0x3F	; 63
     f10:	5f 4f       	sbci	r21, 0xFF	; 255
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	8a e7       	ldi	r24, 0x7A	; 122
     f18:	0e 94 db 06 	call	0xdb6	; 0xdb6 <simpleserial_put>
#endif
}
     f1c:	cf 53       	subi	r28, 0x3F	; 63
     f1e:	df 4f       	sbci	r29, 0xFF	; 255
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	08 95       	ret

00000f3a <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
     f3a:	e0 e4       	ldi	r30, 0x40	; 64
     f3c:	f6 e0       	ldi	r31, 0x06	; 6
     f3e:	88 e0       	ldi	r24, 0x08	; 8
     f40:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     f46:	e0 ea       	ldi	r30, 0xA0	; 160
     f48:	f8 e0       	ldi	r31, 0x08	; 8
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	85 83       	std	Z+5, r24	; 0x05
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	USART_Baudrate_Set(&USART, 11, 0);
     f4e:	8b e0       	ldi	r24, 0x0B	; 11
     f50:	86 83       	std	Z+6, r24	; 0x06
     f52:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
     f54:	84 81       	ldd	r24, Z+4	; 0x04
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
     f5a:	84 81       	ldd	r24, Z+4	; 0x04
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	84 83       	std	Z+4, r24	; 0x04
     f60:	08 95       	ret

00000f62 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	1f 92       	push	r1
     f68:	1f 92       	push	r1
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	69 83       	std	Y+1, r22	; 0x01
     f70:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
     f76:	49 81       	ldd	r20, Y+1	; 0x01
     f78:	5a 81       	ldd	r21, Y+2	; 0x02
     f7a:	24 17       	cp	r18, r20
     f7c:	35 07       	cpc	r19, r21
     f7e:	69 f0       	breq	.+26     	; 0xf9a <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
     f80:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
     f84:	47 ff       	sbrs	r20, 7
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
     f88:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     f8c:	fc 01       	movw	r30, r24
     f8e:	20 83       	st	Z, r18
			return BYTE_REC;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	ee cf       	rjmp	.-36     	; 0xf76 <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
	}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
     fa6:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
     faa:	87 ff       	sbrs	r24, 7
     fac:	fc cf       	rjmp	.-8      	; 0xfa6 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
     fae:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
     fb2:	08 95       	ret

00000fb4 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
     fb4:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
     fb8:	95 ff       	sbrs	r25, 5
     fba:	fc cf       	rjmp	.-8      	; 0xfb4 <output_ch_0>
	USART_PutChar(&USART, data);
     fbc:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     fc0:	08 95       	ret

00000fc2 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     fc2:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     fc4:	60 83       	st	Z, r22
     fc6:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     fc8:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     fca:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
     fcc:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
     fce:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
     fd0:	15 86       	std	Z+13, r1	; 0x0d
     fd2:	08 95       	ret

00000fd4 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     fd4:	fc 01       	movw	r30, r24
     fd6:	62 83       	std	Z+2, r22	; 0x02
     fd8:	08 95       	ret

00000fda <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
     fda:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     fdc:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     fde:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     fe0:	9f 5f       	subi	r25, 0xFF	; 255
     fe2:	93 70       	andi	r25, 0x03	; 3
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	92 13       	cpse	r25, r18
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <USART_TXBuffer_FreeSpace+0x12>
     fea:	80 e0       	ldi	r24, 0x00	; 0
}
     fec:	08 95       	ret

00000fee <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ec 01       	movw	r28, r24
     ff6:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     ff8:	0e 94 ed 07 	call	0xfda	; 0xfda <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     ffc:	88 23       	and	r24, r24
     ffe:	79 f0       	breq	.+30     	; 0x101e <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1000:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
    1002:	fe 01       	movw	r30, r28
    1004:	e9 0f       	add	r30, r25
    1006:	f1 1d       	adc	r31, r1
    1008:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    100a:	9f 5f       	subi	r25, 0xFF	; 255
    100c:	93 70       	andi	r25, 0x03	; 3
    100e:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    1010:	e8 81       	ld	r30, Y
    1012:	f9 81       	ldd	r31, Y+1	; 0x01
    1014:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1016:	9c 7f       	andi	r25, 0xFC	; 252
    1018:	2a 81       	ldd	r18, Y+2	; 0x02
    101a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    101c:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	08 95       	ret

00001026 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1026:	fc 01       	movw	r30, r24
    1028:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    102a:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	29 13       	cpse	r18, r25
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <USART_RXBufferData_Available+0xe>
    1032:	80 e0       	ldi	r24, 0x00	; 0
}
    1034:	08 95       	ret

00001036 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    1036:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1038:	84 85       	ldd	r24, Z+12	; 0x0c
    103a:	df 01       	movw	r26, r30
    103c:	a8 0f       	add	r26, r24
    103e:	b1 1d       	adc	r27, r1
    1040:	13 96       	adiw	r26, 0x03	; 3
    1042:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    1044:	94 85       	ldd	r25, Z+12	; 0x0c
    1046:	9f 5f       	subi	r25, 0xFF	; 255
    1048:	93 70       	andi	r25, 0x03	; 3
    104a:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
    104c:	08 95       	ret

0000104e <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    104e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    1050:	83 85       	ldd	r24, Z+11	; 0x0b
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1056:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
    1058:	a0 81       	ld	r26, Z
    105a:	b1 81       	ldd	r27, Z+1	; 0x01
    105c:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
    105e:	82 17       	cp	r24, r18
    1060:	49 f0       	breq	.+18     	; 0x1074 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1062:	23 85       	ldd	r18, Z+11	; 0x0b
    1064:	df 01       	movw	r26, r30
    1066:	a2 0f       	add	r26, r18
    1068:	b1 1d       	adc	r27, r1
    106a:	13 96       	adiw	r26, 0x03	; 3
    106c:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
    106e:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    1074:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    1076:	08 95       	ret

00001078 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    107e:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
    1080:	85 85       	ldd	r24, Z+13	; 0x0d
    1082:	a0 81       	ld	r26, Z
    1084:	b1 81       	ldd	r27, Z+1	; 0x01
    1086:	98 13       	cpse	r25, r24
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    108a:	13 96       	adiw	r26, 0x03	; 3
    108c:	8c 91       	ld	r24, X
    108e:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1090:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1092:	13 96       	adiw	r26, 0x03	; 3
    1094:	8c 93       	st	X, r24
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    1098:	86 85       	ldd	r24, Z+14	; 0x0e
    109a:	ef 01       	movw	r28, r30
    109c:	c8 0f       	add	r28, r24
    109e:	d1 1d       	adc	r29, r1
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
    10a2:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    10a4:	86 85       	ldd	r24, Z+14	; 0x0e
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	83 70       	andi	r24, 0x03	; 3
    10aa:	86 87       	std	Z+14, r24	; 0x0e
	}
}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
    10b2:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
    10b4:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
    10b6:	70 ff       	sbrs	r23, 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
    10be:	8e 7f       	andi	r24, 0xFE	; 254
    10c0:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
    10c2:	60 83       	st	Z, r22
    10c4:	08 95       	ret

000010c6 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
    10c6:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
    10c8:	84 81       	ldd	r24, Z+4	; 0x04
    10ca:	80 ff       	sbrs	r24, 0
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
    10ce:	80 81       	ld	r24, Z
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	91 60       	ori	r25, 0x01	; 1
    10d4:	08 95       	ret
	}else {
		return(usart->DATA);
    10d6:	80 81       	ld	r24, Z
    10d8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    10da:	08 95       	ret

000010dc <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
    10dc:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
    10e0:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
    10e4:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    10e8:	88 60       	ori	r24, 0x08	; 8
    10ea:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
    10ee:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    10f2:	83 ff       	sbrs	r24, 3
    10f4:	fc cf       	rjmp	.-8      	; 0x10ee <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
    10f6:	88 ed       	ldi	r24, 0xD8	; 216
    10f8:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
    1100:	88 e0       	ldi	r24, 0x08	; 8
    1102:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    1106:	80 e6       	ldi	r24, 0x60	; 96
    1108:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
    110c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1110:	08 95       	ret

00001112 <aes_indep_init>:
#include "aes_keyschedule.h"

aes128_ctx_t ctx;

void aes_indep_init(void)
{
    1112:	08 95       	ret

00001114 <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
	aes128_init(key, &ctx);
    1114:	68 e3       	ldi	r22, 0x38	; 56
    1116:	71 e3       	ldi	r23, 0x31	; 49
    1118:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <aes128_init>

0000111c <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	aes128_enc(pt, &ctx); /* encrypting the data block */
    111c:	68 e3       	ldi	r22, 0x38	; 56
    111e:	71 e3       	ldi	r23, 0x31	; 49
    1120:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <aes128_enc>

00001124 <aes_indep_mask>:
}

void aes_indep_mask(uint8_t * m)
{
    1124:	08 95       	ret

00001126 <aes_shiftcol>:
#include "gf256mul.h"
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void* data, uint8_t shift){
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	00 d0       	rcall	.+0      	; 0x112c <aes_shiftcol+0x6>
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	dc 01       	movw	r26, r24
	uint8_t tmp[4];
	tmp[0] = ((uint8_t*)data)[ 0];
    1134:	8c 91       	ld	r24, X
    1136:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = ((uint8_t*)data)[ 4];
    1138:	14 96       	adiw	r26, 0x04	; 4
    113a:	8c 91       	ld	r24, X
    113c:	14 97       	sbiw	r26, 0x04	; 4
    113e:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = ((uint8_t*)data)[ 8];
    1140:	18 96       	adiw	r26, 0x08	; 8
    1142:	8c 91       	ld	r24, X
    1144:	18 97       	sbiw	r26, 0x08	; 8
    1146:	8b 83       	std	Y+3, r24	; 0x03
	tmp[3] = ((uint8_t*)data)[12];
    1148:	1c 96       	adiw	r26, 0x0c	; 12
    114a:	8c 91       	ld	r24, X
    114c:	1c 97       	sbiw	r26, 0x0c	; 12
    114e:	8c 83       	std	Y+4, r24	; 0x04
	((uint8_t*)data)[ 0] = tmp[(shift+0)&3];
    1150:	86 2f       	mov	r24, r22
    1152:	83 70       	andi	r24, 0x03	; 3
    1154:	e1 e0       	ldi	r30, 0x01	; 1
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	ec 0f       	add	r30, r28
    115a:	fd 1f       	adc	r31, r29
    115c:	e8 0f       	add	r30, r24
    115e:	f1 1d       	adc	r31, r1
    1160:	80 81       	ld	r24, Z
    1162:	8c 93       	st	X, r24
	((uint8_t*)data)[ 4] = tmp[(shift+1)&3];
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	fb 01       	movw	r30, r22
    1168:	31 96       	adiw	r30, 0x01	; 1
    116a:	e3 70       	andi	r30, 0x03	; 3
    116c:	ff 27       	eor	r31, r31
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	8c 0f       	add	r24, r28
    1174:	9d 1f       	adc	r25, r29
    1176:	e8 0f       	add	r30, r24
    1178:	f9 1f       	adc	r31, r25
    117a:	80 81       	ld	r24, Z
    117c:	14 96       	adiw	r26, 0x04	; 4
    117e:	8c 93       	st	X, r24
    1180:	14 97       	sbiw	r26, 0x04	; 4
	((uint8_t*)data)[ 8] = tmp[(shift+2)&3];
    1182:	fb 01       	movw	r30, r22
    1184:	32 96       	adiw	r30, 0x02	; 2
    1186:	e3 70       	andi	r30, 0x03	; 3
    1188:	ff 27       	eor	r31, r31
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	8c 0f       	add	r24, r28
    1190:	9d 1f       	adc	r25, r29
    1192:	e8 0f       	add	r30, r24
    1194:	f9 1f       	adc	r31, r25
    1196:	80 81       	ld	r24, Z
    1198:	18 96       	adiw	r26, 0x08	; 8
    119a:	8c 93       	st	X, r24
    119c:	18 97       	sbiw	r26, 0x08	; 8
	((uint8_t*)data)[12] = tmp[(shift+3)&3];
    119e:	fb 01       	movw	r30, r22
    11a0:	33 96       	adiw	r30, 0x03	; 3
    11a2:	e3 70       	andi	r30, 0x03	; 3
    11a4:	ff 27       	eor	r31, r31
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	8c 0f       	add	r24, r28
    11ac:	9d 1f       	adc	r25, r29
    11ae:	e8 0f       	add	r30, r24
    11b0:	f9 1f       	adc	r31, r25
    11b2:	80 81       	ld	r24, Z
    11b4:	1c 96       	adiw	r26, 0x0c	; 12
    11b6:	8c 93       	st	X, r24
}
    11b8:	24 96       	adiw	r28, 0x04	; 4
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <aes_encrypt_core>:
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
    11c4:	2f 92       	push	r2
    11c6:	3f 92       	push	r3
    11c8:	4f 92       	push	r4
    11ca:	5f 92       	push	r5
    11cc:	6f 92       	push	r6
    11ce:	7f 92       	push	r7
    11d0:	8f 92       	push	r8
    11d2:	9f 92       	push	r9
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	63 97       	sbiw	r28, 0x13	; 19
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	7c 01       	movw	r14, r24
    11f4:	5b 01       	movw	r10, r22
    11f6:	24 2e       	mov	r2, r20
    11f8:	db 01       	movw	r26, r22
    11fa:	8a 8b       	std	Y+18, r24	; 0x12
    11fc:	9b 8b       	std	Y+19, r25	; 0x13
    11fe:	2c 01       	movw	r4, r24
    1200:	20 e1       	ldi	r18, 0x10	; 16
    1202:	42 0e       	add	r4, r18
    1204:	51 1c       	adc	r5, r1
    1206:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
    1208:	8d 91       	ld	r24, X+
    120a:	90 81       	ld	r25, Z
    120c:	89 27       	eor	r24, r25
    120e:	81 93       	st	Z+, r24
	}
}

void aes_encrypt_core(aes_cipher_state_t* state, const aes_genctx_t* ks, uint8_t rounds){
	uint8_t i;
	for(i=0; i<16; ++i){
    1210:	e4 15       	cp	r30, r4
    1212:	f5 05       	cpc	r31, r5
    1214:	c9 f7       	brne	.-14     	; 0x1208 <aes_encrypt_core+0x44>
    1216:	45 01       	movw	r8, r10
    1218:	30 e1       	ldi	r19, 0x10	; 16
    121a:	83 0e       	add	r8, r19
    121c:	91 1c       	adc	r9, r1
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	89 8b       	std	Y+17, r24	; 0x11
    1222:	3e 01       	movw	r6, r28
    1224:	a1 e1       	ldi	r26, 0x11	; 17
    1226:	6a 0e       	add	r6, r26
    1228:	71 1c       	adc	r7, r1
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	22 15       	cp	r18, r2
    122e:	08 f0       	brcs	.+2      	; 0x1232 <aes_encrypt_core+0x6e>
    1230:	81 c0       	rjmp	.+258    	; 0x1334 <aes_encrypt_core+0x170>
    1232:	8e 01       	movw	r16, r28
    1234:	0f 5f       	subi	r16, 0xFF	; 255
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	d8 01       	movw	r26, r16
    123a:	c7 01       	movw	r24, r14
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
    123c:	fc 01       	movw	r30, r24
    123e:	21 91       	ld	r18, Z+
    1240:	cf 01       	movw	r24, r30
    1242:	e2 2f       	mov	r30, r18
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e6 51       	subi	r30, 0x16	; 22
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	e4 91       	lpm	r30, Z
    124c:	ed 93       	st	X+, r30
static
void aes_enc_round(aes_cipher_state_t* state, const aes_roundkey_t* k){
	uint8_t tmp[16], t;
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
    124e:	a6 15       	cp	r26, r6
    1250:	b7 05       	cpc	r27, r7
    1252:	a1 f7       	brne	.-24     	; 0x123c <aes_encrypt_core+0x78>
		tmp[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	ce 01       	movw	r24, r28
    1258:	02 96       	adiw	r24, 0x02	; 2
    125a:	0e 94 93 08 	call	0x1126	; 0x1126 <aes_shiftcol>
	aes_shiftcol(tmp+2, 2);
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	ce 01       	movw	r24, r28
    1262:	03 96       	adiw	r24, 0x03	; 3
    1264:	0e 94 93 08 	call	0x1126	; 0x1126 <aes_shiftcol>
	aes_shiftcol(tmp+3, 3);
    1268:	63 e0       	ldi	r22, 0x03	; 3
    126a:	ce 01       	movw	r24, r28
    126c:	04 96       	adiw	r24, 0x04	; 4
    126e:	0e 94 93 08 	call	0x1126	; 0x1126 <aes_shiftcol>
    1272:	67 01       	movw	r12, r14
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
    1274:	d8 01       	movw	r26, r16
    1276:	6c 91       	ld	r22, X
    1278:	11 96       	adiw	r26, 0x01	; 1
    127a:	8c 91       	ld	r24, X
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	68 27       	eor	r22, r24
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	3c 90       	ld	r3, X
    1284:	12 97       	sbiw	r26, 0x02	; 2
    1286:	13 96       	adiw	r26, 0x03	; 3
    1288:	8c 91       	ld	r24, X
    128a:	38 26       	eor	r3, r24
    128c:	36 26       	eor	r3, r22
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
    128e:	4b e1       	ldi	r20, 0x1B	; 27
    1290:	82 e0       	ldi	r24, 0x02	; 2
    1292:	0e 94 9b 0a 	call	0x1536	; 0x1536 <gf256mul>
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
    1296:	f8 01       	movw	r30, r16
    1298:	90 81       	ld	r25, Z
    129a:	89 27       	eor	r24, r25
    129c:	83 25       	eor	r24, r3
    129e:	d6 01       	movw	r26, r12
    12a0:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
    12a2:	61 81       	ldd	r22, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	68 27       	eor	r22, r24
    12a8:	4b e1       	ldi	r20, 0x1B	; 27
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	0e 94 9b 0a 	call	0x1536	; 0x1536 <gf256mul>
		t = tmp[4*i+0] ^ tmp[4*i+1] ^ tmp[4*i+2] ^ tmp[4*i+3];
		state->s[4*i+0] =
			  GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
			^ tmp[4*i+0]
			^ t;
		state->s[4*i+1] =
    12b0:	f8 01       	movw	r30, r16
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	89 27       	eor	r24, r25
    12b6:	83 25       	eor	r24, r3
    12b8:	d6 01       	movw	r26, r12
    12ba:	11 96       	adiw	r26, 0x01	; 1
    12bc:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
    12be:	62 81       	ldd	r22, Z+2	; 0x02
    12c0:	83 81       	ldd	r24, Z+3	; 0x03
    12c2:	68 27       	eor	r22, r24
    12c4:	4b e1       	ldi	r20, 0x1B	; 27
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <gf256mul>
			^ t;
		state->s[4*i+1] =
			  GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
			^ tmp[4*i+1]
			^ t;
		state->s[4*i+2] =
    12cc:	f8 01       	movw	r30, r16
    12ce:	92 81       	ldd	r25, Z+2	; 0x02
    12d0:	89 27       	eor	r24, r25
    12d2:	83 25       	eor	r24, r3
    12d4:	d6 01       	movw	r26, r12
    12d6:	12 96       	adiw	r26, 0x02	; 2
    12d8:	8c 93       	st	X, r24
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
			  GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
    12da:	63 81       	ldd	r22, Z+3	; 0x03
    12dc:	80 81       	ld	r24, Z
    12de:	68 27       	eor	r22, r24
    12e0:	4b e1       	ldi	r20, 0x1B	; 27
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <gf256mul>
			^ t;
		state->s[4*i+2] =
			  GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
			^ tmp[4*i+2]
			^ t;
		state->s[4*i+3] =
    12e8:	f8 01       	movw	r30, r16
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	89 27       	eor	r24, r25
    12ee:	38 26       	eor	r3, r24
    12f0:	d6 01       	movw	r26, r12
    12f2:	13 96       	adiw	r26, 0x03	; 3
    12f4:	3c 92       	st	X, r3
    12f6:	0c 5f       	subi	r16, 0xFC	; 252
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	b4 e0       	ldi	r27, 0x04	; 4
    12fc:	cb 0e       	add	r12, r27
    12fe:	d1 1c       	adc	r13, r1
	/* shiftRows */
	aes_shiftcol(tmp+1, 1);
	aes_shiftcol(tmp+2, 2);
	aes_shiftcol(tmp+3, 3);
	/* mixColums */
	for(i=0; i<4; ++i){
    1300:	06 15       	cp	r16, r6
    1302:	17 05       	cpc	r17, r7
    1304:	09 f0       	breq	.+2      	; 0x1308 <aes_encrypt_core+0x144>
    1306:	b6 cf       	rjmp	.-148    	; 0x1274 <aes_encrypt_core+0xb0>
    1308:	f7 01       	movw	r30, r14
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
    130e:	d4 01       	movw	r26, r8
    1310:	a8 0f       	add	r26, r24
    1312:	b9 1f       	adc	r27, r25
    1314:	30 81       	ld	r19, Z
    1316:	2c 91       	ld	r18, X
    1318:	23 27       	eor	r18, r19
    131a:	21 93       	st	Z+, r18
    131c:	01 96       	adiw	r24, 0x01	; 1
			^ tmp[4*i+3]
			^ t;
	}

	/* addKey */
	for(i=0; i<16; ++i){
    131e:	80 31       	cpi	r24, 0x10	; 16
    1320:	91 05       	cpc	r25, r1
    1322:	a9 f7       	brne	.-22     	; 0x130e <aes_encrypt_core+0x14a>
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
    1324:	e9 89       	ldd	r30, Y+17	; 0x11
    1326:	ef 5f       	subi	r30, 0xFF	; 255
    1328:	e9 8b       	std	Y+17, r30	; 0x11
	uint8_t i;
	for(i=0; i<16; ++i){
		state->s[i] ^= ks->key[0].ks[i];
	}
	i=1;
	for(;rounds>1;--rounds){
    132a:	2a 94       	dec	r2
    132c:	f0 e1       	ldi	r31, 0x10	; 16
    132e:	8f 0e       	add	r8, r31
    1330:	91 1c       	adc	r9, r1
    1332:	7b cf       	rjmp	.-266    	; 0x122a <aes_encrypt_core+0x66>
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
    1334:	d7 01       	movw	r26, r14
static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
    1336:	ec 91       	ld	r30, X
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	e6 51       	subi	r30, 0x16	; 22
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	e4 91       	lpm	r30, Z
    1340:	ed 93       	st	X+, r30

static
void aes_enc_lastround(aes_cipher_state_t* state,const aes_roundkey_t* k){
	uint8_t i;
	/* subBytes */
	for(i=0; i<16; ++i){
    1342:	a4 15       	cp	r26, r4
    1344:	b5 05       	cpc	r27, r5
    1346:	b9 f7       	brne	.-18     	; 0x1336 <aes_encrypt_core+0x172>
		state->s[i] = pgm_read_byte(aes_sbox+state->s[i]);
	}
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	c7 01       	movw	r24, r14
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	0e 94 93 08 	call	0x1126	; 0x1126 <aes_shiftcol>
	aes_shiftcol(state->s+2, 2);
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	c7 01       	movw	r24, r14
    1356:	02 96       	adiw	r24, 0x02	; 2
    1358:	0e 94 93 08 	call	0x1126	; 0x1126 <aes_shiftcol>
	aes_shiftcol(state->s+3, 3);
    135c:	63 e0       	ldi	r22, 0x03	; 3
    135e:	c7 01       	movw	r24, r14
    1360:	03 96       	adiw	r24, 0x03	; 3
    1362:	0e 94 93 08 	call	0x1126	; 0x1126 <aes_shiftcol>
    1366:	a9 89       	ldd	r26, Y+17	; 0x11
    1368:	30 e1       	ldi	r19, 0x10	; 16
    136a:	a3 9f       	mul	r26, r19
    136c:	c0 01       	movw	r24, r0
    136e:	11 24       	eor	r1, r1
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
	/* keyAdd */
	for(i=0; i<16; ++i){
		state->s[i] ^= k->ks[i];
    1374:	fc 01       	movw	r30, r24
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	ea 0d       	add	r30, r10
    137c:	fb 1d       	adc	r31, r11
    137e:	aa 89       	ldd	r26, Y+18	; 0x12
    1380:	bb 89       	ldd	r27, Y+19	; 0x13
    1382:	5c 91       	ld	r21, X
    1384:	40 81       	ld	r20, Z
    1386:	45 27       	eor	r20, r21
    1388:	4d 93       	st	X+, r20
    138a:	aa 8b       	std	Y+18, r26	; 0x12
    138c:	bb 8b       	std	Y+19, r27	; 0x13
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
	/* shiftRows */
	aes_shiftcol(state->s+1, 1);
	aes_shiftcol(state->s+2, 2);
	aes_shiftcol(state->s+3, 3);
	/* keyAdd */
	for(i=0; i<16; ++i){
    1392:	20 31       	cpi	r18, 0x10	; 16
    1394:	31 05       	cpc	r19, r1
    1396:	71 f7       	brne	.-36     	; 0x1374 <aes_encrypt_core+0x1b0>
	for(;rounds>1;--rounds){
		aes_enc_round(state, &(ks->key[i]));
		++i;
	}
	aes_enc_lastround(state, &(ks->key[i]));
}
    1398:	63 96       	adiw	r28, 0x13	; 19
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	3f 90       	pop	r3
    13c0:	2f 90       	pop	r2
    13c2:	08 95       	ret

000013c4 <aes_init>:

const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ea 01       	movw	r28, r20
	uint8_t rc=0;
	union {
		uint32_t v32;
		uint8_t  v8[4];
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
    13de:	6b 01       	movw	r12, r22
    13e0:	f5 e0       	ldi	r31, 0x05	; 5
    13e2:	d6 94       	lsr	r13
    13e4:	c7 94       	ror	r12
    13e6:	fa 95       	dec	r31
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <aes_init+0x1e>
    13ea:	ec 2c       	mov	r14, r12
	hi=4*(nk+6+1);
    13ec:	86 01       	movw	r16, r12
    13ee:	11 27       	eor	r17, r17
    13f0:	98 01       	movw	r18, r16
    13f2:	29 5f       	subi	r18, 0xF9	; 249
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	f2 2e       	mov	r15, r18
    13f8:	ff 0c       	add	r15, r15
    13fa:	ff 0c       	add	r15, r15
	memcpy(ctx, key, keysize_b/8);
    13fc:	ab 01       	movw	r20, r22
    13fe:	a3 e0       	ldi	r26, 0x03	; 3
    1400:	56 95       	lsr	r21
    1402:	47 95       	ror	r20
    1404:	aa 95       	dec	r26
    1406:	e1 f7       	brne	.-8      	; 0x1400 <aes_init+0x3c>
    1408:	bc 01       	movw	r22, r24
    140a:	ce 01       	movw	r24, r28
    140c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <memcpy>
	next_nk = nk;
    1410:	dc 2c       	mov	r13, r12
	for(i=nk;i<hi;++i){
    1412:	2c 2d       	mov	r18, r12
                             0x10, 0x20, 0x40, 0x80,
                             0x1b, 0x36 };

void aes_init(const void* key, uint16_t keysize_b, aes_genctx_t* ctx){
	uint8_t hi,i,nk, next_nk;
	uint8_t rc=0;
    1414:	30 e0       	ldi	r19, 0x00	; 0
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
    1416:	2f 15       	cp	r18, r15
    1418:	08 f0       	brcs	.+2      	; 0x141c <aes_init+0x58>
    141a:	6e c0       	rjmp	.+220    	; 0x14f8 <aes_init+0x134>
		tmp.v32 = ((uint32_t*)(ctx->key[0].ks))[i-1];
    141c:	62 2f       	mov	r22, r18
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	ab 01       	movw	r20, r22
    1422:	41 50       	subi	r20, 0x01	; 1
    1424:	50 4c       	sbci	r21, 0xC0	; 192
    1426:	44 0f       	add	r20, r20
    1428:	55 1f       	adc	r21, r21
    142a:	44 0f       	add	r20, r20
    142c:	55 1f       	adc	r21, r21
    142e:	4c 0f       	add	r20, r28
    1430:	5d 1f       	adc	r21, r29
    1432:	fa 01       	movw	r30, r20
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	a2 81       	ldd	r26, Z+2	; 0x02
    143a:	b3 81       	ldd	r27, Z+3	; 0x03
		if(i!=next_nk){
    143c:	2d 15       	cp	r18, r13
    143e:	09 f1       	breq	.+66     	; 0x1482 <aes_init+0xbe>
			if(nk==8 && i%8==4){
    1440:	f8 e0       	ldi	r31, 0x08	; 8
    1442:	ef 12       	cpse	r14, r31
    1444:	41 c0       	rjmp	.+130    	; 0x14c8 <aes_init+0x104>
    1446:	e2 2f       	mov	r30, r18
    1448:	e7 70       	andi	r30, 0x07	; 7
    144a:	e4 30       	cpi	r30, 0x04	; 4
    144c:	09 f0       	breq	.+2      	; 0x1450 <aes_init+0x8c>
    144e:	3c c0       	rjmp	.+120    	; 0x14c8 <aes_init+0x104>
				tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
    1450:	e8 2f       	mov	r30, r24
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	e6 51       	subi	r30, 0x16	; 22
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	e4 91       	lpm	r30, Z
    145a:	8e 2f       	mov	r24, r30
				tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
    145c:	e9 2f       	mov	r30, r25
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	e6 51       	subi	r30, 0x16	; 22
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	e4 91       	lpm	r30, Z
    1466:	9e 2f       	mov	r25, r30
				tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
    1468:	ea 2f       	mov	r30, r26
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	e6 51       	subi	r30, 0x16	; 22
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	e4 91       	lpm	r30, Z
    1472:	ae 2f       	mov	r26, r30
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
    1474:	eb 2f       	mov	r30, r27
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e6 51       	subi	r30, 0x16	; 22
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	e4 91       	lpm	r30, Z
    147e:	be 2f       	mov	r27, r30
    1480:	23 c0       	rjmp	.+70     	; 0x14c8 <aes_init+0x104>
			}
		} else {
			next_nk += nk;
    1482:	d2 2e       	mov	r13, r18
    1484:	de 0c       	add	r13, r14
#include <avr/pgmspace.h>

static
void aes_rotword(void* a){
	uint8_t t;
	t=((uint8_t*)a)[0];
    1486:	c8 2e       	mov	r12, r24
	((uint8_t*)a)[0] = ((uint8_t*)a)[1];
	((uint8_t*)a)[1] = ((uint8_t*)a)[2];
	((uint8_t*)a)[2] = ((uint8_t*)a)[3];
    1488:	ab 2e       	mov	r10, r27
				tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
			}
		} else {
			next_nk += nk;
			aes_rotword(&(tmp.v32));
			tmp.v8[0] = pgm_read_byte(aes_sbox+tmp.v8[0]);
    148a:	e9 2f       	mov	r30, r25
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	e6 51       	subi	r30, 0x16	; 22
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	b4 90       	lpm	r11, Z
			tmp.v8[1] = pgm_read_byte(aes_sbox+tmp.v8[1]);
    1494:	ea 2f       	mov	r30, r26
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	e6 51       	subi	r30, 0x16	; 22
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	e4 91       	lpm	r30, Z
    149e:	9e 2f       	mov	r25, r30
			tmp.v8[2] = pgm_read_byte(aes_sbox+tmp.v8[2]);
    14a0:	ea 2d       	mov	r30, r10
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	e6 51       	subi	r30, 0x16	; 22
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	e4 91       	lpm	r30, Z
    14aa:	ae 2f       	mov	r26, r30
			tmp.v8[3] = pgm_read_byte(aes_sbox+tmp.v8[3]);
    14ac:	ec 2d       	mov	r30, r12
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	e6 51       	subi	r30, 0x16	; 22
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	e4 91       	lpm	r30, Z
    14b6:	be 2f       	mov	r27, r30
			tmp.v8[0] ^= pgm_read_byte(rc_tab+rc);
    14b8:	e3 2f       	mov	r30, r19
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	e0 52       	subi	r30, 0x20	; 32
    14be:	fe 4f       	sbci	r31, 0xFE	; 254
    14c0:	e4 91       	lpm	r30, Z
    14c2:	8b 2d       	mov	r24, r11
    14c4:	8e 27       	eor	r24, r30
			rc++;
    14c6:	3f 5f       	subi	r19, 0xFF	; 255
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
    14c8:	fb 01       	movw	r30, r22
    14ca:	e0 1b       	sub	r30, r16
    14cc:	f1 0b       	sbc	r31, r17
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	ec 0f       	add	r30, r28
    14d8:	fd 1f       	adc	r31, r29
    14da:	80 80       	ld	r8, Z
    14dc:	91 80       	ldd	r9, Z+1	; 0x01
    14de:	a2 80       	ldd	r10, Z+2	; 0x02
    14e0:	b3 80       	ldd	r11, Z+3	; 0x03
    14e2:	88 25       	eor	r24, r8
    14e4:	99 25       	eor	r25, r9
    14e6:	aa 25       	eor	r26, r10
    14e8:	bb 25       	eor	r27, r11
    14ea:	fa 01       	movw	r30, r20
    14ec:	84 83       	std	Z+4, r24	; 0x04
    14ee:	95 83       	std	Z+5, r25	; 0x05
    14f0:	a6 83       	std	Z+6, r26	; 0x06
    14f2:	b7 83       	std	Z+7, r27	; 0x07
	} tmp;
	nk=keysize_b>>5; /* 4, 6, 8 */
	hi=4*(nk+6+1);
	memcpy(ctx, key, keysize_b/8);
	next_nk = nk;
	for(i=nk;i<hi;++i){
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	8f cf       	rjmp	.-226    	; 0x1416 <aes_init+0x52>
			rc++;
		}
		((uint32_t*)(ctx->key[0].ks))[i] = ((uint32_t*)(ctx->key[0].ks))[i-nk]
		                                   ^ tmp.v32;
	}
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	bf 90       	pop	r11
    150a:	af 90       	pop	r10
    150c:	9f 90       	pop	r9
    150e:	8f 90       	pop	r8
    1510:	08 95       	ret

00001512 <aes128_init>:

void aes128_init(const void* key, aes128_ctx_t* ctx){
    1512:	ab 01       	movw	r20, r22
	aes_init(key, 128, (aes_genctx_t*)ctx);
    1514:	60 e8       	ldi	r22, 0x80	; 128
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <aes_init>

0000151c <aes192_init>:
}

void aes192_init(const void* key, aes192_ctx_t* ctx){
    151c:	ab 01       	movw	r20, r22
	aes_init(key, 192, (aes_genctx_t*)ctx);
    151e:	60 ec       	ldi	r22, 0xC0	; 192
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <aes_init>

00001526 <aes256_init>:
}

void aes256_init(const void* key, aes256_ctx_t* ctx){
    1526:	ab 01       	movw	r20, r22
	aes_init(key, 256, (aes_genctx_t*)ctx);
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	71 e0       	ldi	r23, 0x01	; 1
    152c:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <aes_init>

00001530 <aes128_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes128_enc(void* buffer, aes128_ctx_t* ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 10);
    1530:	4a e0       	ldi	r20, 0x0A	; 10
    1532:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <aes_encrypt_core>

00001536 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
    1536:	78 2f       	mov	r23, r24
	clr r24
    1538:	88 27       	eor	r24, r24
1:	
	lsr A
    153a:	76 95       	lsr	r23
	breq 4f
    153c:	31 f0       	breq	.+12     	; 0x154a <gf256mul+0x14>
	brcc 2f
    153e:	08 f4       	brcc	.+2      	; 0x1542 <gf256mul+0xc>
	eor P, B
    1540:	86 27       	eor	r24, r22
2:
	lsl B
    1542:	66 0f       	add	r22, r22
	brcc 3f
    1544:	08 f4       	brcc	.+2      	; 0x1548 <gf256mul+0x12>
	eor B, r20	
    1546:	64 27       	eor	r22, r20
3:
	rjmp 1b
    1548:	f8 cf       	rjmp	.-16     	; 0x153a <gf256mul+0x4>
4:
	brcc 2f
    154a:	08 f4       	brcc	.+2      	; 0x154e <gf256mul+0x18>
	eor P, B
    154c:	86 27       	eor	r24, r22
2:
	ret
    154e:	08 95       	ret

00001550 <main>:
int main(void)
{
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	a0 97       	sbiw	r28, 0x20	; 32
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	de bf       	out	0x3e, r29	; 62
	uint8_t tmp[32] = {0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}; //Default key
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	e0 ea       	ldi	r30, 0xA0	; 160
    1562:	f2 e2       	ldi	r31, 0x22	; 34
    1564:	de 01       	movw	r26, r28
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	01 90       	ld	r0, Z+
    156a:	0d 92       	st	X+, r0
    156c:	8a 95       	dec	r24
    156e:	e1 f7       	brne	.-8      	; 0x1568 <main+0x18>

    platform_init();
    1570:	0e 94 6e 08 	call	0x10dc	; 0x10dc <platform_init>
    init_uart();
    1574:	0e 94 9d 07 	call	0xf3a	; 0xf3a <init_uart0>
    trigger_setup();
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>

	kuznyechik_setkey((uint8_t*) tmp);
    157e:	ce 01       	movw	r24, r28
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	0e 94 05 02 	call	0x40a	; 0x40a <kuznyechik_setkey>

    /* Uncomment this to get a HELLO message for debug */
    
    putch('h');
    1586:	88 e6       	ldi	r24, 0x68	; 104
    1588:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('e');
    158c:	85 e6       	ldi	r24, 0x65	; 101
    158e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('l');
    1592:	8c e6       	ldi	r24, 0x6C	; 108
    1594:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('l');
    1598:	8c e6       	ldi	r24, 0x6C	; 108
    159a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('o');
    159e:	8f e6       	ldi	r24, 0x6F	; 111
    15a0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    putch('\n');
    15a4:	8a e0       	ldi	r24, 0x0A	; 10
    15a6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <output_ch_0>
    
	
    simpleserial_init();
    15aa:	0e 94 d4 06 	call	0xda8	; 0xda8 <simpleserial_init>
    simpleserial_addcmd('k', 32, get_key);
    15ae:	4a e9       	ldi	r20, 0x9A	; 154
    15b0:	51 e0       	ldi	r21, 0x01	; 1
    15b2:	60 e2       	ldi	r22, 0x20	; 32
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	8b e6       	ldi	r24, 0x6B	; 107
    15b8:	0e 94 b1 06 	call	0xd62	; 0xd62 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
    15bc:	4e e9       	ldi	r20, 0x9E	; 158
    15be:	51 e0       	ldi	r21, 0x01	; 1
    15c0:	60 e1       	ldi	r22, 0x10	; 16
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e7       	ldi	r24, 0x70	; 112
    15c6:	0e 94 b1 06 	call	0xd62	; 0xd62 <simpleserial_addcmd>
    simpleserial_addcmd('d', 16,  get_dc);
    15ca:	4b eb       	ldi	r20, 0xBB	; 187
    15cc:	51 e0       	ldi	r21, 0x01	; 1
    15ce:	60 e1       	ldi	r22, 0x10	; 16
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	84 e6       	ldi	r24, 0x64	; 100
    15d4:	0e 94 b1 06 	call	0xd62	; 0xd62 <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
    15d8:	48 e9       	ldi	r20, 0x98	; 152
    15da:	51 e0       	ldi	r21, 0x01	; 1
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	88 e7       	ldi	r24, 0x78	; 120
    15e2:	0e 94 b1 06 	call	0xd62	; 0xd62 <simpleserial_addcmd>
    simpleserial_addcmd('f',  0,   fubar); //here was alexx
    15e6:	48 ed       	ldi	r20, 0xD8	; 216
    15e8:	51 e0       	ldi	r21, 0x01	; 1
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	86 e6       	ldi	r24, 0x66	; 102
    15f0:	0e 94 b1 06 	call	0xd62	; 0xd62 <simpleserial_addcmd>
    //simpleserial_addcmd('m', 18, get_mask);
    while(1)
        simpleserial_get();
    15f4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <simpleserial_get>
    15f8:	fd cf       	rjmp	.-6      	; 0x15f4 <main+0xa4>

000015fa <memcpy>:
    15fa:	fb 01       	movw	r30, r22
    15fc:	dc 01       	movw	r26, r24
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <memcpy+0xa>
    1600:	01 90       	ld	r0, Z+
    1602:	0d 92       	st	X+, r0
    1604:	41 50       	subi	r20, 0x01	; 1
    1606:	50 40       	sbci	r21, 0x00	; 0
    1608:	d8 f7       	brcc	.-10     	; 0x1600 <memcpy+0x6>
    160a:	08 95       	ret

0000160c <_exit>:
    160c:	f8 94       	cli

0000160e <__stop_program>:
    160e:	ff cf       	rjmp	.-2      	; 0x160e <__stop_program>
